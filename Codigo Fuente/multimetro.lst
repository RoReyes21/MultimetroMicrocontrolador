CCS PCM C Compiler, Version 5.093, 4770               10-nov.-24 20:49

               Filename:   C:\Users\thefo\Desktop\MultimetroMicrocontrolador\Codigo Fuente\multimetro.lst

               ROM used:   2070 words (25%)
                           Largest free fragment is 2048
               RAM used:   21 (6%) at main() level
                           60 (16%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.3
0028:  GOTO   02B
0029:  BTFSC  0B.0
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   04F
.................... #include <16f877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
*
0089:  DATA 8C,26
008A:  DATA 75,36
008B:  DATA F4,34
008C:  DATA ED,32
008D:  DATA 74,39
008E:  DATA 6F,10
008F:  DATA C4,34
0090:  DATA 67,17
0091:  DATA 00,00
0092:  DATA C5,28
0093:  DATA 20,1B
0094:  DATA 2C,10
0095:  DATA 47,39
0096:  DATA 75,38
0097:  DATA 6F,10
0098:  DATA 36,00
0099:  DATA 0C,26
009A:  DATA 6F,38
009B:  DATA 65,3D
009C:  DATA A0,21
009D:  DATA 61,39
009E:  DATA F2,30
009F:  DATA F3,31
00A0:  DATA 6F,00
00A1:  DATA CB,30
00A2:  DATA 72,36
00A3:  DATA 61,00
00A4:  DATA 0C,29
00A5:  DATA E5,3C
00A6:  DATA E5,39
00A7:  DATA 20,2B
00A8:  DATA 61,36
00A9:  DATA E4,32
00AA:  DATA 72,39
00AB:  DATA E1,36
00AC:  DATA 61,00
00AD:  DATA D2,37
00AE:  DATA 64,39
00AF:  DATA E9,33
00B0:  DATA 6F,10
00B1:  DATA CD,34
00B2:  DATA E7,3A
00B3:  DATA 65,36
00B4:  DATA 00,00
00B5:  DATA 0C,15
00B6:  DATA 20,2A
00B7:  DATA E5,36
00B8:  DATA F0,32
00B9:  DATA F2,30
00BA:  DATA F4,3A
00BB:  DATA F2,30
00BC:  DATA 00,01
00BD:  DATA 20,2B
00BE:  DATA 6F,36
00BF:  DATA F4,34
00C0:  DATA ED,32
00C1:  DATA 74,39
00C2:  DATA 6F,00
00C3:  DATA 0C,15
00C4:  DATA 20,2B
00C5:  DATA 6F,36
00C6:  DATA F4,34
00C7:  DATA ED,32
00C8:  DATA 74,39
00C9:  DATA 6F,00
00CA:  DATA A0,20
00CB:  DATA 6D,38
00CC:  DATA 65,39
00CD:  DATA E9,36
00CE:  DATA 65,3A
00CF:  DATA F2,37
00D0:  DATA 00,01
00D1:  DATA 0C,10
00D2:  DATA D6,37
00D3:  DATA 6C,3A
00D4:  DATA E9,36
00D5:  DATA 65,3A
00D6:  DATA F2,37
00D7:  DATA 00,01
00D8:  DATA 2A,10
00D9:  DATA C1,36
00DA:  DATA F0,32
00DB:  DATA F2,34
00DC:  DATA ED,32
00DD:  DATA 74,39
00DE:  DATA 6F,00
00DF:  DATA 0C,10
00E0:  DATA D4,32
00E1:  DATA 6D,38
00E2:  DATA 65,39
00E3:  DATA 61,3A
00E4:  DATA 75,39
00E5:  DATA 61,1D
00E6:  DATA 20,00
00E7:  DATA 0C,10
00E8:  DATA D6,37
00E9:  DATA 6C,3A
00EA:  DATA 61,35
00EB:  DATA 65,1D
00EC:  DATA 20,00
00ED:  DATA A0,12
00EE:  DATA 32,17
00EF:  DATA 32,33
00F0:  DATA A0,2D
00F1:  DATA D6,2E
00F2:  DATA 00,00
00F3:  DATA 0C,10
00F4:  DATA C3,37
00F5:  DATA 72,39
00F6:  DATA E9,32
00F7:  DATA 6E,3A
00F8:  DATA 65,1D
00F9:  DATA 20,00
00FA:  DATA A0,12
00FB:  DATA 32,17
00FC:  DATA 32,33
00FD:  DATA A0,2D
00FE:  DATA ED,20
00FF:  DATA 5D,00
*
022A:  MOVF   0B,W
022B:  MOVWF  3D
022C:  BCF    0B.7
022D:  BSF    03.5
022E:  BSF    03.6
022F:  BSF    0C.7
0230:  BSF    0C.0
0231:  NOP
0232:  NOP
0233:  BCF    03.5
0234:  BCF    03.6
0235:  BTFSC  3D.7
0236:  BSF    0B.7
0237:  BSF    03.6
0238:  MOVF   0C,W
0239:  ANDLW  7F
023A:  BTFSC  03.2
023B:  GOTO   27E
023C:  BCF    03.6
023D:  MOVWF  3D
023E:  BSF    03.6
023F:  MOVF   0D,W
0240:  BCF    03.6
0241:  MOVWF  3E
0242:  BSF    03.6
0243:  MOVF   0F,W
0244:  BCF    03.6
0245:  MOVWF  3F
0246:  MOVF   3D,W
0247:  MOVWF  4A
0248:  CALL   1FE
0249:  MOVF   3E,W
024A:  BSF    03.6
024B:  MOVWF  0D
024C:  BCF    03.6
024D:  MOVF   3F,W
024E:  BSF    03.6
024F:  MOVWF  0F
0250:  BCF    03.6
0251:  MOVF   0B,W
0252:  MOVWF  40
0253:  BCF    0B.7
0254:  BSF    03.5
0255:  BSF    03.6
0256:  BSF    0C.7
0257:  BSF    0C.0
0258:  NOP
0259:  NOP
025A:  BCF    03.5
025B:  BCF    03.6
025C:  BTFSC  40.7
025D:  BSF    0B.7
025E:  BSF    03.6
025F:  RLF    0C,W
0260:  RLF    0E,W
0261:  ANDLW  7F
0262:  BTFSC  03.2
0263:  GOTO   27E
0264:  BCF    03.6
0265:  MOVWF  3D
0266:  BSF    03.6
0267:  MOVF   0D,W
0268:  BCF    03.6
0269:  MOVWF  3E
026A:  BSF    03.6
026B:  MOVF   0F,W
026C:  BCF    03.6
026D:  MOVWF  3F
026E:  MOVF   3D,W
026F:  MOVWF  4A
0270:  CALL   1FE
0271:  MOVF   3E,W
0272:  BSF    03.6
0273:  MOVWF  0D
0274:  BCF    03.6
0275:  MOVF   3F,W
0276:  BSF    03.6
0277:  MOVWF  0F
0278:  INCF   0D,F
0279:  BTFSC  03.2
027A:  INCF   0F,F
027B:  BCF    03.6
027C:  GOTO   22A
027D:  BSF    03.6
027E:  BCF    03.6
027F:  RETURN
*
0360:  MOVLW  8E
0361:  MOVWF  77
0362:  MOVF   3E,W
0363:  MOVWF  78
0364:  MOVF   3D,W
0365:  MOVWF  79
0366:  CLRF   7A
0367:  MOVF   78,F
0368:  BTFSS  03.2
0369:  GOTO   374
036A:  MOVF   79,W
036B:  MOVWF  78
036C:  CLRF   79
036D:  MOVLW  08
036E:  SUBWF  77,F
036F:  MOVF   78,F
0370:  BTFSS  03.2
0371:  GOTO   374
0372:  CLRF   77
0373:  GOTO   37C
0374:  BCF    03.0
0375:  BTFSC  78.7
0376:  GOTO   37B
0377:  RLF    79,F
0378:  RLF    78,F
0379:  DECF   77,F
037A:  GOTO   374
037B:  BCF    78.7
037C:  RETURN
037D:  MOVF   4A,W
037E:  BTFSC  03.2
037F:  GOTO   3ED
0380:  MOVWF  52
0381:  MOVF   4E,W
0382:  BTFSC  03.2
0383:  GOTO   3ED
0384:  ADDWF  52,F
0385:  BTFSC  03.0
0386:  GOTO   38E
0387:  MOVLW  7F
0388:  SUBWF  52,F
0389:  BTFSS  03.0
038A:  GOTO   3ED
038B:  BTFSC  03.2
038C:  GOTO   3ED
038D:  GOTO   392
038E:  MOVLW  81
038F:  ADDWF  52,F
0390:  BTFSC  03.0
0391:  GOTO   3ED
0392:  MOVF   52,W
0393:  MOVWF  77
0394:  CLRF   78
0395:  CLRF   79
0396:  CLRF   7A
0397:  MOVF   4B,W
0398:  MOVWF  56
0399:  BSF    56.7
039A:  MOVF   4C,W
039B:  MOVWF  55
039C:  MOVF   4D,W
039D:  MOVWF  54
039E:  MOVLW  18
039F:  MOVWF  52
03A0:  CLRF   53
03A1:  BTFSS  54.0
03A2:  GOTO   3BB
03A3:  MOVF   51,W
03A4:  ADDWF  7A,F
03A5:  BTFSS  03.0
03A6:  GOTO   3AD
03A7:  INCF   79,F
03A8:  BTFSS  03.2
03A9:  GOTO   3AD
03AA:  INCF   78,F
03AB:  BTFSC  03.2
03AC:  BSF    53.7
03AD:  MOVF   50,W
03AE:  ADDWF  79,F
03AF:  BTFSS  03.0
03B0:  GOTO   3B4
03B1:  INCF   78,F
03B2:  BTFSC  03.2
03B3:  BSF    53.7
03B4:  MOVF   4F,W
03B5:  MOVWF  4C
03B6:  BSF    4C.7
03B7:  MOVF   4C,W
03B8:  ADDWF  78,F
03B9:  BTFSC  03.0
03BA:  BSF    53.7
03BB:  RLF    53,F
03BC:  RRF    78,F
03BD:  RRF    79,F
03BE:  RRF    7A,F
03BF:  RRF    56,F
03C0:  RRF    55,F
03C1:  RRF    54,F
03C2:  BCF    03.0
03C3:  DECFSZ 52,F
03C4:  GOTO   3A0
03C5:  MOVLW  01
03C6:  ADDWF  77,F
03C7:  BTFSC  03.0
03C8:  GOTO   3ED
03C9:  BTFSC  78.7
03CA:  GOTO   3D2
03CB:  RLF    56,F
03CC:  RLF    7A,F
03CD:  RLF    79,F
03CE:  RLF    78,F
03CF:  DECF   77,F
03D0:  BTFSC  03.2
03D1:  GOTO   3ED
03D2:  BTFSS  56.7
03D3:  GOTO   3E3
03D4:  INCF   7A,F
03D5:  BTFSS  03.2
03D6:  GOTO   3E3
03D7:  INCF   79,F
03D8:  BTFSS  03.2
03D9:  GOTO   3E3
03DA:  INCF   78,F
03DB:  BTFSS  03.2
03DC:  GOTO   3E3
03DD:  RRF    78,F
03DE:  RRF    79,F
03DF:  RRF    7A,F
03E0:  INCF   77,F
03E1:  BTFSC  03.2
03E2:  GOTO   3ED
03E3:  MOVF   4B,W
03E4:  MOVWF  53
03E5:  MOVF   4F,W
03E6:  XORWF  53,F
03E7:  BTFSS  53.7
03E8:  GOTO   3EB
03E9:  BSF    78.7
03EA:  GOTO   3F1
03EB:  BCF    78.7
03EC:  GOTO   3F1
03ED:  CLRF   77
03EE:  CLRF   78
03EF:  CLRF   79
03F0:  CLRF   7A
03F1:  RETURN
03F2:  BTFSC  03.1
03F3:  GOTO   3F7
03F4:  MOVLW  52
03F5:  MOVWF  04
03F6:  BCF    03.7
03F7:  CLRF   77
03F8:  CLRF   78
03F9:  CLRF   79
03FA:  CLRF   7A
03FB:  CLRF   52
03FC:  CLRF   53
03FD:  CLRF   54
03FE:  CLRF   55
03FF:  MOVF   51,W
0400:  IORWF  50,W
0401:  IORWF  4F,W
0402:  IORWF  4E,W
0403:  BTFSC  03.2
0404:  GOTO   435
0405:  MOVLW  20
0406:  MOVWF  56
0407:  BCF    03.0
0408:  RLF    4A,F
0409:  RLF    4B,F
040A:  RLF    4C,F
040B:  RLF    4D,F
040C:  RLF    52,F
040D:  RLF    53,F
040E:  RLF    54,F
040F:  RLF    55,F
0410:  MOVF   51,W
0411:  SUBWF  55,W
0412:  BTFSS  03.2
0413:  GOTO   41E
0414:  MOVF   50,W
0415:  SUBWF  54,W
0416:  BTFSS  03.2
0417:  GOTO   41E
0418:  MOVF   4F,W
0419:  SUBWF  53,W
041A:  BTFSS  03.2
041B:  GOTO   41E
041C:  MOVF   4E,W
041D:  SUBWF  52,W
041E:  BTFSS  03.0
041F:  GOTO   42F
0420:  MOVF   4E,W
0421:  SUBWF  52,F
0422:  MOVF   4F,W
0423:  BTFSS  03.0
0424:  INCFSZ 4F,W
0425:  SUBWF  53,F
0426:  MOVF   50,W
0427:  BTFSS  03.0
0428:  INCFSZ 50,W
0429:  SUBWF  54,F
042A:  MOVF   51,W
042B:  BTFSS  03.0
042C:  INCFSZ 51,W
042D:  SUBWF  55,F
042E:  BSF    03.0
042F:  RLF    77,F
0430:  RLF    78,F
0431:  RLF    79,F
0432:  RLF    7A,F
0433:  DECFSZ 56,F
0434:  GOTO   407
0435:  MOVF   52,W
0436:  MOVWF  00
0437:  INCF   04,F
0438:  MOVF   53,W
0439:  MOVWF  00
043A:  INCF   04,F
043B:  MOVF   54,W
043C:  MOVWF  00
043D:  INCF   04,F
043E:  MOVF   55,W
043F:  MOVWF  00
0440:  RETURN
0441:  MOVF   04,W
0442:  MOVWF  42
0443:  MOVF   41,W
0444:  MOVWF  44
0445:  BTFSC  03.2
0446:  GOTO   460
0447:  MOVF   40,W
0448:  MOVWF  4D
0449:  MOVF   3F,W
044A:  MOVWF  4C
044B:  MOVF   3E,W
044C:  MOVWF  4B
044D:  MOVF   3D,W
044E:  MOVWF  4A
044F:  CLRF   51
0450:  CLRF   50
0451:  MOVLW  20
0452:  MOVWF  4F
0453:  MOVLW  82
0454:  MOVWF  4E
0455:  CALL   37D
0456:  MOVF   7A,W
0457:  MOVWF  40
0458:  MOVF   79,W
0459:  MOVWF  3F
045A:  MOVF   78,W
045B:  MOVWF  3E
045C:  MOVF   77,W
045D:  MOVWF  3D
045E:  DECFSZ 44,F
045F:  GOTO   447
0460:  MOVF   40,W
0461:  MOVWF  4D
0462:  MOVF   3F,W
0463:  MOVWF  4C
0464:  MOVF   3E,W
0465:  MOVWF  4B
0466:  MOVF   3D,W
0467:  MOVWF  4A
0468:  MOVF   4A,W
0469:  SUBLW  B6
046A:  MOVWF  4A
046B:  CLRF   7A
046C:  MOVF   4B,W
046D:  MOVWF  4E
046E:  BSF    4B.7
046F:  BCF    03.0
0470:  RRF    4B,F
0471:  RRF    4C,F
0472:  RRF    4D,F
0473:  RRF    7A,F
0474:  RRF    79,F
0475:  RRF    78,F
0476:  RRF    77,F
0477:  DECFSZ 4A,F
0478:  GOTO   46F
0479:  BTFSS  4E.7
047A:  GOTO   486
047B:  COMF   77,F
047C:  COMF   78,F
047D:  COMF   79,F
047E:  COMF   7A,F
047F:  INCF   77,F
0480:  BTFSC  03.2
0481:  INCF   78,F
0482:  BTFSC  03.2
0483:  INCF   79,F
0484:  BTFSC  03.2
0485:  INCF   7A,F
0486:  MOVF   7A,W
0487:  MOVWF  40
0488:  MOVF   79,W
0489:  MOVWF  3F
048A:  MOVF   78,W
048B:  MOVWF  3E
048C:  MOVF   77,W
048D:  MOVWF  3D
048E:  BTFSS  40.7
048F:  GOTO   49D
0490:  DECF   42,F
0491:  BSF    42.5
0492:  COMF   3D,F
0493:  COMF   3E,F
0494:  COMF   3F,F
0495:  COMF   40,F
0496:  INCF   3D,F
0497:  BTFSC  03.2
0498:  INCF   3E,F
0499:  BTFSC  03.2
049A:  INCF   3F,F
049B:  BTFSC  03.2
049C:  INCF   40,F
049D:  MOVLW  3B
049E:  MOVWF  49
049F:  MOVLW  9A
04A0:  MOVWF  48
04A1:  MOVLW  CA
04A2:  MOVWF  47
04A3:  CLRF   46
04A4:  MOVLW  0A
04A5:  MOVWF  44
04A6:  MOVF   41,W
04A7:  BTFSC  03.2
04A8:  INCF   42,F
04A9:  BSF    03.1
04AA:  MOVLW  3D
04AB:  MOVWF  04
04AC:  BCF    03.7
04AD:  MOVF   40,W
04AE:  MOVWF  4D
04AF:  MOVF   3F,W
04B0:  MOVWF  4C
04B1:  MOVF   3E,W
04B2:  MOVWF  4B
04B3:  MOVF   3D,W
04B4:  MOVWF  4A
04B5:  MOVF   49,W
04B6:  MOVWF  51
04B7:  MOVF   48,W
04B8:  MOVWF  50
04B9:  MOVF   47,W
04BA:  MOVWF  4F
04BB:  MOVF   46,W
04BC:  MOVWF  4E
04BD:  CALL   3F2
04BE:  MOVF   78,W
04BF:  MOVF   77,F
04C0:  BTFSS  03.2
04C1:  GOTO   4D5
04C2:  INCF   41,W
04C3:  SUBWF  44,W
04C4:  BTFSC  03.2
04C5:  GOTO   4D5
04C6:  MOVF   42,W
04C7:  BTFSC  03.2
04C8:  GOTO   4D7
04C9:  ANDLW  0F
04CA:  SUBWF  44,W
04CB:  BTFSC  03.2
04CC:  GOTO   4CF
04CD:  BTFSC  03.0
04CE:  GOTO   507
04CF:  BTFSC  42.7
04D0:  GOTO   507
04D1:  BTFSC  42.6
04D2:  GOTO   4D7
04D3:  MOVLW  20
04D4:  GOTO   503
04D5:  MOVLW  20
04D6:  ANDWF  42,F
04D7:  BTFSS  42.5
04D8:  GOTO   4E5
04D9:  BCF    42.5
04DA:  MOVF   41,W
04DB:  BTFSS  03.2
04DC:  DECF   42,F
04DD:  MOVF   77,W
04DE:  MOVWF  42
04DF:  MOVLW  2D
04E0:  MOVWF  4A
04E1:  CALL   1FE
04E2:  MOVF   42,W
04E3:  MOVWF  77
04E4:  CLRF   42
04E5:  MOVF   41,W
04E6:  SUBWF  44,W
04E7:  BTFSS  03.2
04E8:  GOTO   4F3
04E9:  MOVF   77,W
04EA:  MOVWF  42
04EB:  MOVLW  2E
04EC:  MOVWF  4A
04ED:  CALL   1FE
04EE:  MOVF   42,W
04EF:  MOVWF  77
04F0:  MOVLW  20
04F1:  ANDWF  42,F
04F2:  MOVLW  00
04F3:  MOVLW  30
04F4:  BTFSS  42.5
04F5:  GOTO   503
04F6:  BCF    42.5
04F7:  MOVF   41,W
04F8:  BTFSS  03.2
04F9:  DECF   42,F
04FA:  MOVF   77,W
04FB:  MOVWF  42
04FC:  MOVLW  2D
04FD:  MOVWF  4A
04FE:  CALL   1FE
04FF:  MOVF   42,W
0500:  MOVWF  77
0501:  CLRF   42
0502:  MOVLW  30
0503:  ADDWF  77,F
0504:  MOVF   77,W
0505:  MOVWF  4A
0506:  CALL   1FE
0507:  BCF    03.1
0508:  MOVF   49,W
0509:  MOVWF  4D
050A:  MOVF   48,W
050B:  MOVWF  4C
050C:  MOVF   47,W
050D:  MOVWF  4B
050E:  MOVF   46,W
050F:  MOVWF  4A
0510:  CLRF   51
0511:  CLRF   50
0512:  CLRF   4F
0513:  MOVLW  0A
0514:  MOVWF  4E
0515:  CALL   3F2
0516:  MOVF   7A,W
0517:  MOVWF  49
0518:  MOVF   79,W
0519:  MOVWF  48
051A:  MOVF   78,W
051B:  MOVWF  47
051C:  MOVF   77,W
051D:  MOVWF  46
051E:  DECFSZ 44,F
051F:  GOTO   4A9
0520:  RETURN
*
0584:  MOVF   0B,W
0585:  MOVWF  3E
0586:  BCF    0B.7
0587:  BSF    03.5
0588:  BSF    03.6
0589:  BSF    0C.7
058A:  BSF    0C.0
058B:  NOP
058C:  NOP
058D:  BCF    03.5
058E:  BCF    03.6
058F:  BTFSC  3E.7
0590:  BSF    0B.7
0591:  BTFSC  03.0
0592:  GOTO   5BB
0593:  BSF    03.6
0594:  MOVF   0C,W
0595:  ANDLW  7F
0596:  BCF    03.6
0597:  MOVWF  3E
0598:  BSF    03.6
0599:  MOVF   0D,W
059A:  BCF    03.6
059B:  MOVWF  3F
059C:  BSF    03.6
059D:  MOVF   0F,W
059E:  BCF    03.6
059F:  MOVWF  40
05A0:  MOVF   3E,W
05A1:  MOVWF  4A
05A2:  CALL   1FE
05A3:  MOVF   3F,W
05A4:  BSF    03.6
05A5:  MOVWF  0D
05A6:  BCF    03.6
05A7:  MOVF   40,W
05A8:  BSF    03.6
05A9:  MOVWF  0F
05AA:  BCF    03.6
05AB:  MOVF   0B,W
05AC:  MOVWF  41
05AD:  BCF    0B.7
05AE:  BSF    03.5
05AF:  BSF    03.6
05B0:  BSF    0C.7
05B1:  BSF    0C.0
05B2:  NOP
05B3:  NOP
05B4:  BCF    03.5
05B5:  BCF    03.6
05B6:  BTFSC  41.7
05B7:  BSF    0B.7
05B8:  DECFSZ 3D,F
05B9:  GOTO   5BB
05BA:  GOTO   5DA
05BB:  BSF    03.6
05BC:  RLF    0C,W
05BD:  RLF    0E,W
05BE:  ANDLW  7F
05BF:  BCF    03.6
05C0:  MOVWF  3E
05C1:  BSF    03.6
05C2:  MOVF   0D,W
05C3:  BCF    03.6
05C4:  MOVWF  3F
05C5:  BSF    03.6
05C6:  MOVF   0F,W
05C7:  BCF    03.6
05C8:  MOVWF  40
05C9:  MOVF   3E,W
05CA:  MOVWF  4A
05CB:  CALL   1FE
05CC:  MOVF   3F,W
05CD:  BSF    03.6
05CE:  MOVWF  0D
05CF:  BCF    03.6
05D0:  MOVF   40,W
05D1:  BSF    03.6
05D2:  MOVWF  0F
05D3:  INCF   0D,F
05D4:  BTFSC  03.2
05D5:  INCF   0F,F
05D6:  BCF    03.0
05D7:  BCF    03.6
05D8:  DECFSZ 3D,F
05D9:  GOTO   584
05DA:  RETURN
*
067A:  MOVLW  8E
067B:  MOVWF  77
067C:  MOVF   3D,W
067D:  SUBWF  77,F
067E:  MOVF   3E,W
067F:  MOVWF  79
0680:  MOVF   3F,W
0681:  MOVWF  78
0682:  BSF    79.7
0683:  MOVF   77,F
0684:  BTFSC  03.2
0685:  GOTO   691
0686:  BCF    03.0
0687:  MOVF   79,F
0688:  BTFSS  03.2
0689:  GOTO   68D
068A:  MOVF   78,F
068B:  BTFSC  03.2
068C:  GOTO   691
068D:  RRF    79,F
068E:  RRF    78,F
068F:  DECFSZ 77,F
0690:  GOTO   686
0691:  BTFSS  3E.7
0692:  GOTO   698
0693:  COMF   78,F
0694:  COMF   79,F
0695:  INCF   78,F
0696:  BTFSC  03.2
0697:  INCF   79,F
*
06C7:  MOVF   3D,W
06C8:  BTFSC  03.2
06C9:  GOTO   78C
06CA:  MOVWF  49
06CB:  MOVF   41,W
06CC:  BTFSC  03.2
06CD:  GOTO   78C
06CE:  SUBWF  49,F
06CF:  BTFSS  03.0
06D0:  GOTO   6D6
06D1:  MOVLW  7F
06D2:  ADDWF  49,F
06D3:  BTFSC  03.0
06D4:  GOTO   78C
06D5:  GOTO   6DC
06D6:  MOVLW  81
06D7:  SUBWF  49,F
06D8:  BTFSS  03.0
06D9:  GOTO   78C
06DA:  BTFSC  03.2
06DB:  GOTO   78C
06DC:  MOVF   49,W
06DD:  MOVWF  77
06DE:  CLRF   78
06DF:  CLRF   79
06E0:  CLRF   7A
06E1:  CLRF   48
06E2:  MOVF   3E,W
06E3:  MOVWF  47
06E4:  BSF    47.7
06E5:  MOVF   3F,W
06E6:  MOVWF  46
06E7:  MOVF   40,W
06E8:  MOVWF  45
06E9:  MOVLW  19
06EA:  MOVWF  49
06EB:  MOVF   44,W
06EC:  SUBWF  45,F
06ED:  BTFSC  03.0
06EE:  GOTO   6FF
06EF:  MOVLW  01
06F0:  SUBWF  46,F
06F1:  BTFSC  03.0
06F2:  GOTO   6FF
06F3:  SUBWF  47,F
06F4:  BTFSC  03.0
06F5:  GOTO   6FF
06F6:  SUBWF  48,F
06F7:  BTFSC  03.0
06F8:  GOTO   6FF
06F9:  INCF   48,F
06FA:  INCF   47,F
06FB:  INCF   46,F
06FC:  MOVF   44,W
06FD:  ADDWF  45,F
06FE:  GOTO   731
06FF:  MOVF   43,W
0700:  SUBWF  46,F
0701:  BTFSC  03.0
0702:  GOTO   71A
0703:  MOVLW  01
0704:  SUBWF  47,F
0705:  BTFSC  03.0
0706:  GOTO   71A
0707:  SUBWF  48,F
0708:  BTFSC  03.0
0709:  GOTO   71A
070A:  INCF   48,F
070B:  INCF   47,F
070C:  MOVF   43,W
070D:  ADDWF  46,F
070E:  MOVF   44,W
070F:  ADDWF  45,F
0710:  BTFSS  03.0
0711:  GOTO   731
0712:  INCF   46,F
0713:  BTFSS  03.2
0714:  GOTO   731
0715:  INCF   47,F
0716:  BTFSS  03.2
0717:  GOTO   731
0718:  INCF   48,F
0719:  GOTO   731
071A:  MOVF   42,W
071B:  IORLW  80
071C:  SUBWF  47,F
071D:  BTFSC  03.0
071E:  GOTO   730
071F:  MOVLW  01
0720:  SUBWF  48,F
0721:  BTFSC  03.0
0722:  GOTO   730
0723:  INCF   48,F
0724:  MOVF   42,W
0725:  IORLW  80
0726:  ADDWF  47,F
0727:  MOVF   43,W
0728:  ADDWF  46,F
0729:  BTFSS  03.0
072A:  GOTO   70E
072B:  INCF   47,F
072C:  BTFSS  03.2
072D:  GOTO   70E
072E:  INCF   48,F
072F:  GOTO   70E
0730:  BSF    7A.0
0731:  DECFSZ 49,F
0732:  GOTO   734
0733:  GOTO   73F
0734:  BCF    03.0
0735:  RLF    45,F
0736:  RLF    46,F
0737:  RLF    47,F
0738:  RLF    48,F
0739:  BCF    03.0
073A:  RLF    7A,F
073B:  RLF    79,F
073C:  RLF    78,F
073D:  RLF    4A,F
073E:  GOTO   6EB
073F:  BTFSS  4A.0
0740:  GOTO   747
0741:  BCF    03.0
0742:  RRF    78,F
0743:  RRF    79,F
0744:  RRF    7A,F
0745:  RRF    4A,F
0746:  GOTO   74A
0747:  DECF   77,F
0748:  BTFSC  03.2
0749:  GOTO   78C
074A:  BTFSC  4A.7
074B:  GOTO   773
074C:  BCF    03.0
074D:  RLF    45,F
074E:  RLF    46,F
074F:  RLF    47,F
0750:  RLF    48,F
0751:  MOVF   44,W
0752:  SUBWF  45,F
0753:  BTFSC  03.0
0754:  GOTO   75F
0755:  MOVLW  01
0756:  SUBWF  46,F
0757:  BTFSC  03.0
0758:  GOTO   75F
0759:  SUBWF  47,F
075A:  BTFSC  03.0
075B:  GOTO   75F
075C:  SUBWF  48,F
075D:  BTFSS  03.0
075E:  GOTO   782
075F:  MOVF   43,W
0760:  SUBWF  46,F
0761:  BTFSC  03.0
0762:  GOTO   76A
0763:  MOVLW  01
0764:  SUBWF  47,F
0765:  BTFSC  03.0
0766:  GOTO   76A
0767:  SUBWF  48,F
0768:  BTFSS  03.0
0769:  GOTO   782
076A:  MOVF   42,W
076B:  IORLW  80
076C:  SUBWF  47,F
076D:  BTFSC  03.0
076E:  GOTO   773
076F:  MOVLW  01
0770:  SUBWF  48,F
0771:  BTFSS  03.0
0772:  GOTO   782
0773:  INCF   7A,F
0774:  BTFSS  03.2
0775:  GOTO   782
0776:  INCF   79,F
0777:  BTFSS  03.2
0778:  GOTO   782
0779:  INCF   78,F
077A:  BTFSS  03.2
077B:  GOTO   782
077C:  INCF   77,F
077D:  BTFSC  03.2
077E:  GOTO   78C
077F:  RRF    78,F
0780:  RRF    79,F
0781:  RRF    7A,F
0782:  MOVF   3E,W
0783:  MOVWF  49
0784:  MOVF   42,W
0785:  XORWF  49,F
0786:  BTFSS  49.7
0787:  GOTO   78A
0788:  BSF    78.7
0789:  GOTO   790
078A:  BCF    78.7
078B:  GOTO   790
078C:  CLRF   77
078D:  CLRF   78
078E:  CLRF   79
078F:  CLRF   7A
*
0839:  BCF    0A.0
083A:  BCF    0A.1
083B:  BCF    0A.2
083C:  ADDWF  02,F
083D:  GOTO   027
083E:  GOTO   02B
083F:  GOTO   02F
0840:  GOTO   033
.................... 
.................... #list
.................... 
.................... 
.................... #fuses HS, NOPROTECT, NOLVP
.................... #device ADC=10
.................... #use delay(clock=20M)
*
011B:  MOVLW  4B
011C:  MOVWF  04
011D:  BCF    03.7
011E:  MOVF   00,W
011F:  BTFSC  03.2
0120:  GOTO   12E
0121:  MOVLW  06
0122:  MOVWF  78
0123:  CLRF   77
0124:  DECFSZ 77,F
0125:  GOTO   124
0126:  DECFSZ 78,F
0127:  GOTO   123
0128:  MOVLW  7B
0129:  MOVWF  77
012A:  DECFSZ 77,F
012B:  GOTO   12A
012C:  DECFSZ 00,F
012D:  GOTO   121
012E:  RETURN
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7)
.................... 
.................... // LCD Module Connections
.................... #define LCD_RS_PIN PIN_D7
.................... #define LCD_RW_PIN PIN_D0
.................... #define LCD_ENABLE_PIN PIN_D6
.................... #define LCD_DATA4 PIN_D5
.................... #define LCD_DATA5 PIN_D4
.................... #define LCD_DATA6 PIN_D3
.................... #define LCD_DATA7 PIN_D2
.................... //End LCD Module Connections
.................... 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
0196:  BSF    08.5
....................    output_float(LCD_DATA5);
0197:  BSF    08.4
....................    output_float(LCD_DATA6);
0198:  BSF    08.3
....................    output_float(LCD_DATA7);
0199:  BSF    08.2
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
019A:  BCF    03.5
019B:  BSF    08.0
019C:  BSF    03.5
019D:  BCF    08.0
....................    delay_cycles(1);
019E:  NOP
....................    lcd_output_enable(1);
019F:  BCF    03.5
01A0:  BSF    08.6
01A1:  BSF    03.5
01A2:  BCF    08.6
....................    delay_cycles(1);
01A3:  NOP
....................    high = lcd_read_nibble();
01A4:  BCF    03.5
01A5:  CALL   15D
01A6:  MOVF   78,W
01A7:  MOVWF  52
....................       
....................    lcd_output_enable(0);
01A8:  BCF    08.6
01A9:  BSF    03.5
01AA:  BCF    08.6
....................    delay_cycles(1);
01AB:  NOP
....................    lcd_output_enable(1);
01AC:  BCF    03.5
01AD:  BSF    08.6
01AE:  BSF    03.5
01AF:  BCF    08.6
....................    delay_us(1);
01B0:  GOTO   1B1
01B1:  GOTO   1B2
01B2:  NOP
....................    low = lcd_read_nibble();
01B3:  BCF    03.5
01B4:  CALL   15D
01B5:  MOVF   78,W
01B6:  MOVWF  51
....................       
....................    lcd_output_enable(0);
01B7:  BCF    08.6
01B8:  BSF    03.5
01B9:  BCF    08.6
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
01BA:  BCF    08.5
....................    output_drive(LCD_DATA5);
01BB:  BCF    08.4
....................    output_drive(LCD_DATA6);
01BC:  BCF    08.3
....................    output_drive(LCD_DATA7);
01BD:  BCF    08.2
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
01BE:  BCF    03.5
01BF:  SWAPF  52,W
01C0:  MOVWF  77
01C1:  MOVLW  F0
01C2:  ANDWF  77,F
01C3:  MOVF   77,W
01C4:  IORWF  51,W
01C5:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
015D:  CLRF   53
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
015E:  BSF    03.5
015F:  BSF    08.5
0160:  MOVLW  00
0161:  BCF    03.5
0162:  BTFSC  08.5
0163:  MOVLW  01
0164:  IORWF  53,F
....................    n |= input(LCD_DATA5) << 1;
0165:  BSF    03.5
0166:  BSF    08.4
0167:  MOVLW  00
0168:  BCF    03.5
0169:  BTFSC  08.4
016A:  MOVLW  01
016B:  MOVWF  77
016C:  BCF    03.0
016D:  RLF    77,F
016E:  MOVF   77,W
016F:  IORWF  53,F
....................    n |= input(LCD_DATA6) << 2;
0170:  BSF    03.5
0171:  BSF    08.3
0172:  MOVLW  00
0173:  BCF    03.5
0174:  BTFSC  08.3
0175:  MOVLW  01
0176:  MOVWF  77
0177:  RLF    77,F
0178:  RLF    77,F
0179:  MOVLW  FC
017A:  ANDWF  77,F
017B:  MOVF   77,W
017C:  IORWF  53,F
....................    n |= input(LCD_DATA7) << 3;
017D:  BSF    03.5
017E:  BSF    08.2
017F:  MOVLW  00
0180:  BCF    03.5
0181:  BTFSC  08.2
0182:  MOVLW  01
0183:  MOVWF  77
0184:  RLF    77,F
0185:  RLF    77,F
0186:  RLF    77,F
0187:  MOVLW  F8
0188:  ANDWF  77,F
0189:  MOVF   77,W
018A:  IORWF  53,F
....................    
....................    return(n);
018B:  MOVF   53,W
018C:  MOVWF  78
....................   #else
018D:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
012F:  BTFSC  52.0
0130:  GOTO   133
0131:  BCF    08.5
0132:  GOTO   134
0133:  BSF    08.5
0134:  BSF    03.5
0135:  BCF    08.5
....................    output_bit(LCD_DATA5, bit_test(n, 1));
0136:  BCF    03.5
0137:  BTFSC  52.1
0138:  GOTO   13B
0139:  BCF    08.4
013A:  GOTO   13C
013B:  BSF    08.4
013C:  BSF    03.5
013D:  BCF    08.4
....................    output_bit(LCD_DATA6, bit_test(n, 2));
013E:  BCF    03.5
013F:  BTFSC  52.2
0140:  GOTO   143
0141:  BCF    08.3
0142:  GOTO   144
0143:  BSF    08.3
0144:  BSF    03.5
0145:  BCF    08.3
....................    output_bit(LCD_DATA7, bit_test(n, 3));
0146:  BCF    03.5
0147:  BTFSC  52.3
0148:  GOTO   14B
0149:  BCF    08.2
014A:  GOTO   14C
014B:  BSF    08.2
014C:  BSF    03.5
014D:  BCF    08.2
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
014E:  NOP
....................    lcd_output_enable(1);
014F:  BCF    03.5
0150:  BSF    08.6
0151:  BSF    03.5
0152:  BCF    08.6
....................    delay_us(2);
0153:  MOVLW  03
0154:  MOVWF  77
0155:  DECFSZ 77,F
0156:  GOTO   155
....................    lcd_output_enable(0);
0157:  BCF    03.5
0158:  BCF    08.6
0159:  BSF    03.5
015A:  BCF    08.6
015B:  BCF    03.5
015C:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
018E:  BSF    03.5
018F:  BCF    08.6
....................    lcd_rs_tris();
0190:  BCF    08.7
....................    lcd_rw_tris();
0191:  BCF    08.0
....................   #endif
.................... 
....................    lcd_output_rs(0);
0192:  BCF    03.5
0193:  BCF    08.7
0194:  BSF    03.5
0195:  BCF    08.7
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
01C6:  MOVF   78,W
01C7:  MOVWF  51
01C8:  BTFSS  51.7
01C9:  GOTO   1CC
01CA:  BSF    03.5
01CB:  GOTO   196
....................    lcd_output_rs(address);
01CC:  MOVF   4F,F
01CD:  BTFSS  03.2
01CE:  GOTO   1D1
01CF:  BCF    08.7
01D0:  GOTO   1D2
01D1:  BSF    08.7
01D2:  BSF    03.5
01D3:  BCF    08.7
....................    delay_cycles(1);
01D4:  NOP
....................    lcd_output_rw(0);
01D5:  BCF    03.5
01D6:  BCF    08.0
01D7:  BSF    03.5
01D8:  BCF    08.0
....................    delay_cycles(1);
01D9:  NOP
....................    lcd_output_enable(0);
01DA:  BCF    03.5
01DB:  BCF    08.6
01DC:  BSF    03.5
01DD:  BCF    08.6
....................    lcd_send_nibble(n >> 4);
01DE:  BCF    03.5
01DF:  SWAPF  50,W
01E0:  MOVWF  51
01E1:  MOVLW  0F
01E2:  ANDWF  51,F
01E3:  MOVF   51,W
01E4:  MOVWF  52
01E5:  CALL   12F
....................    lcd_send_nibble(n & 0xf);
01E6:  MOVF   50,W
01E7:  ANDLW  0F
01E8:  MOVWF  51
01E9:  MOVWF  52
01EA:  CALL   12F
01EB:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
*
0280:  MOVLW  28
0281:  MOVWF  31
0282:  MOVLW  0C
0283:  MOVWF  32
0284:  MOVLW  01
0285:  MOVWF  33
0286:  MOVLW  06
0287:  MOVWF  34
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0288:  BCF    08.6
0289:  BSF    03.5
028A:  BCF    08.6
....................    lcd_output_rs(0);
028B:  BCF    03.5
028C:  BCF    08.7
028D:  BSF    03.5
028E:  BCF    08.7
....................    lcd_output_rw(0);
028F:  BCF    03.5
0290:  BCF    08.0
0291:  BSF    03.5
0292:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
0293:  BCF    08.5
....................    output_drive(LCD_DATA5);
0294:  BCF    08.4
....................    output_drive(LCD_DATA6);
0295:  BCF    08.3
....................    output_drive(LCD_DATA7);
0296:  BCF    08.2
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
0297:  BCF    08.6
....................    lcd_rs_tris();
0298:  BCF    08.7
....................    lcd_rw_tris();
0299:  BCF    08.0
....................  #endif
....................     
....................    delay_ms(15);
029A:  MOVLW  0F
029B:  BCF    03.5
029C:  MOVWF  4B
029D:  CALL   11B
....................    for(i=1;i<=3;++i)
029E:  MOVLW  01
029F:  MOVWF  30
02A0:  MOVF   30,W
02A1:  SUBLW  03
02A2:  BTFSS  03.0
02A3:  GOTO   2AC
....................    {
....................        lcd_send_nibble(3);
02A4:  MOVLW  03
02A5:  MOVWF  52
02A6:  CALL   12F
....................        delay_ms(5);
02A7:  MOVLW  05
02A8:  MOVWF  4B
02A9:  CALL   11B
02AA:  INCF   30,F
02AB:  GOTO   2A0
....................    }
....................    
....................    lcd_send_nibble(2);
02AC:  MOVLW  02
02AD:  MOVWF  52
02AE:  CALL   12F
....................    delay_ms(5);
02AF:  MOVLW  05
02B0:  MOVWF  4B
02B1:  CALL   11B
....................    for(i=0;i<=3;++i)
02B2:  CLRF   30
02B3:  MOVF   30,W
02B4:  SUBLW  03
02B5:  BTFSS  03.0
02B6:  GOTO   2C3
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
02B7:  MOVLW  31
02B8:  ADDWF  30,W
02B9:  MOVWF  04
02BA:  BCF    03.7
02BB:  MOVF   00,W
02BC:  MOVWF  35
02BD:  CLRF   4F
02BE:  MOVF   35,W
02BF:  MOVWF  50
02C0:  CALL   18E
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
02C1:  INCF   30,F
02C2:  GOTO   2B3
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
01EC:  DECFSZ 4C,W
01ED:  GOTO   1EF
01EE:  GOTO   1F2
....................       address=LCD_LINE_TWO;
01EF:  MOVLW  40
01F0:  MOVWF  4D
01F1:  GOTO   1F3
....................    else
....................       address=0;
01F2:  CLRF   4D
....................      
....................    address+=x-1;
01F3:  MOVLW  01
01F4:  SUBWF  4B,W
01F5:  ADDWF  4D,F
....................    lcd_send_byte(0,0x80|address);
01F6:  MOVF   4D,W
01F7:  IORLW  80
01F8:  MOVWF  4E
01F9:  CLRF   4F
01FA:  MOVF   4E,W
01FB:  MOVWF  50
01FC:  CALL   18E
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
01FD:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
01FE:  MOVF   4A,W
01FF:  XORLW  07
0200:  BTFSC  03.2
0201:  GOTO   20C
0202:  XORLW  0B
0203:  BTFSC  03.2
0204:  GOTO   211
0205:  XORLW  06
0206:  BTFSC  03.2
0207:  GOTO   219
0208:  XORLW  02
0209:  BTFSC  03.2
020A:  GOTO   21F
020B:  GOTO   224
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
020C:  MOVLW  01
020D:  MOVWF  4B
020E:  MOVWF  4C
020F:  CALL   1EC
0210:  GOTO   229
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0211:  CLRF   4F
0212:  MOVLW  01
0213:  MOVWF  50
0214:  CALL   18E
....................                      delay_ms(2);
0215:  MOVLW  02
0216:  MOVWF  4B
0217:  CALL   11B
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
0218:  GOTO   229
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
0219:  MOVLW  01
021A:  MOVWF  4B
021B:  MOVLW  02
021C:  MOVWF  4C
021D:  CALL   1EC
021E:  GOTO   229
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
021F:  CLRF   4F
0220:  MOVLW  10
0221:  MOVWF  50
0222:  CALL   18E
0223:  GOTO   229
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0224:  MOVLW  01
0225:  MOVWF  4F
0226:  MOVF   4A,W
0227:  MOVWF  50
0228:  CALL   18E
....................      #endif
....................    }
0229:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... enum seleccion_opciones_menu {
....................     SELECCION_TEMPERATURA = 1,
....................     SELECCION_VOLTAJE,
....................     SELECCION_AMPERAJE,
.................... };
.................... 
.................... enum estados_menu {
....................     ESTADO_MENU_INICIO,
....................     ESTADO_MENU_TEMPERATURA,
....................     ESTADO_MENU_VOLTAJE,
....................     ESTADO_MENU_AMPERAJE
.................... };
.................... 
.................... void creditos();
.................... void initial_config();
.................... void menu_inicio();
.................... void mostrar_corriente();
.................... void mostrar_voltaje();
.................... void mostrar_temperatura();
.................... 
.................... int seleccion_menu_inicio = SELECCION_TEMPERATURA;
.................... int estado_menu = ESTADO_MENU_INICIO;
.................... int refresh = false;
.................... 
.................... /**
....................  * @brief Interrupcion de botones, cuando reciba una interrupcion maneja los estados
....................  * 
....................  */
.................... #INT_RB
.................... void isr_rb(void) {
....................     switch(input_b()) {
*
004F:  MOVLW  FF
0050:  BSF    03.5
0051:  MOVWF  06
0052:  BCF    03.5
0053:  MOVF   06,W
0054:  XORLW  70
0055:  BTFSC  03.2
0056:  GOTO   061
0057:  XORLW  C0
0058:  BTFSC  03.2
0059:  GOTO   06C
005A:  XORLW  60
005B:  BTFSC  03.2
005C:  GOTO   077
005D:  XORLW  30
005E:  BTFSC  03.2
005F:  GOTO   07F
0060:  GOTO   085
....................         case 0b01110000:
....................             if (estado_menu == ESTADO_MENU_INICIO && (seleccion_menu_inicio > SELECCION_TEMPERATURA)) {
0061:  MOVF   2C,F
0062:  BTFSS  03.2
0063:  GOTO   06B
0064:  MOVF   2B,W
0065:  SUBLW  01
0066:  BTFSC  03.0
0067:  GOTO   06B
....................                 seleccion_menu_inicio--;
0068:  DECF   2B,F
....................                 refresh = true;
0069:  MOVLW  01
006A:  MOVWF  2D
....................             }
.................... 
....................             break;
006B:  GOTO   085
....................         case 0b10110000:
....................             if ((estado_menu == ESTADO_MENU_INICIO) && (seleccion_menu_inicio < SELECCION_AMPERAJE)) {
006C:  MOVF   2C,F
006D:  BTFSS  03.2
006E:  GOTO   076
006F:  MOVF   2B,W
0070:  SUBLW  02
0071:  BTFSS  03.0
0072:  GOTO   076
....................                 seleccion_menu_inicio++;
0073:  INCF   2B,F
....................                 refresh = true;
0074:  MOVLW  01
0075:  MOVWF  2D
....................             }
.................... 
....................             break;
0076:  GOTO   085
....................         case 0b11010000:
....................             if (estado_menu == ESTADO_MENU_INICIO) {
0077:  MOVF   2C,F
0078:  BTFSS  03.2
0079:  GOTO   07E
....................                 estado_menu = seleccion_menu_inicio;
007A:  MOVF   2B,W
007B:  MOVWF  2C
....................                 refresh = true;
007C:  MOVLW  01
007D:  MOVWF  2D
....................             }
....................             break;
007E:  GOTO   085
....................         case 0b11100000:
....................             if (estado_menu != ESTADO_MENU_INICIO) {
007F:  MOVF   2C,F
0080:  BTFSC  03.2
0081:  GOTO   085
....................                 estado_menu = ESTADO_MENU_INICIO;
0082:  CLRF   2C
....................                 refresh = true;
0083:  MOVLW  01
0084:  MOVWF  2D
....................             }
....................             break;
....................     }
....................     //delay_ms(10);
0085:  BCF    0B.0
0086:  BCF    0A.3
0087:  BCF    0A.4
0088:  GOTO   02B
.................... }
.................... 
.................... void main() 
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  MOVLW  81
0804:  BSF    03.5
0805:  MOVWF  19
0806:  MOVLW  A6
0807:  MOVWF  18
0808:  MOVLW  90
0809:  BCF    03.5
080A:  MOVWF  18
080B:  MOVLW  01
080C:  MOVWF  2B
080D:  CLRF   2C
080E:  CLRF   2D
080F:  CLRF   2F
0810:  CLRF   2E
0811:  BSF    03.5
0812:  BSF    1F.0
0813:  BSF    1F.1
0814:  BSF    1F.2
0815:  BCF    1F.3
0816:  MOVLW  07
0817:  MOVWF  1C
0818:  BCF    03.7
.................... {
....................     initial_config();
0819:  BCF    0A.3
081A:  BCF    03.5
081B:  GOTO   100
081C:  BSF    0A.3
....................     creditos();
081D:  BCF    0A.3
081E:  GOTO   280
081F:  BSF    0A.3
.................... 
....................     while(true) {
....................         refresh = false;
0820:  CLRF   2D
.................... 
....................         switch(estado_menu) {
0821:  MOVF   2C,W
0822:  ADDLW  FC
0823:  BTFSC  03.0
0824:  GOTO   037
0825:  ADDLW  04
0826:  GOTO   039
....................             case ESTADO_MENU_INICIO:
....................                 menu_inicio();
0827:  BCF    0A.3
0828:  GOTO   314
0829:  BSF    0A.3
....................                 break;
082A:  GOTO   037
....................             case ESTADO_MENU_TEMPERATURA:
....................                 mostrar_temperatura();
082B:  BCF    0A.3
082C:  GOTO   521
082D:  BSF    0A.3
....................                 break;
082E:  GOTO   037
....................             case ESTADO_MENU_VOLTAJE:
....................                 mostrar_voltaje();
082F:  BCF    0A.3
0830:  GOTO   5DB
0831:  BSF    0A.3
....................                 break;
0832:  GOTO   037
....................             case ESTADO_MENU_AMPERAJE:
....................                 mostrar_corriente();
0833:  BCF    0A.3
0834:  GOTO   645
0835:  BSF    0A.3
....................                 break;
0836:  GOTO   037
....................         }
0837:  GOTO   020
....................     }
.................... }
.................... 
0838:  SLEEP
.................... /**
....................  * @brief Configuracion inicial del microcontrolador antes de que empiece a ejecutar el resto del programa
....................  * 
....................  */
.................... void initial_config() {
....................     setup_adc_ports(AN0_AN1_AN2_AN3_AN4_AN5);
*
0100:  BSF    03.5
0101:  BSF    1F.0
0102:  BCF    1F.1
0103:  BCF    1F.2
0104:  BSF    1F.3
....................     setup_adc(ADC_CLOCK_INTERNAL);
0105:  BCF    1F.6
0106:  BCF    03.5
0107:  BSF    1F.6
0108:  BSF    1F.7
0109:  BSF    03.5
010A:  BSF    1F.7
010B:  BCF    03.5
010C:  BSF    1F.0
....................     output_b(0);
010D:  BSF    03.5
010E:  CLRF   06
010F:  BCF    03.5
0110:  CLRF   06
....................     set_tris_b(0xF0);
0111:  MOVLW  F0
0112:  BSF    03.5
0113:  MOVWF  06
....................     enable_interrupts(INT_RB);
0114:  BCF    03.5
0115:  BSF    0B.3
....................     enable_interrupts(GLOBAL);
0116:  MOVLW  C0
0117:  IORWF  0B,F
0118:  BSF    0A.3
0119:  BCF    0A.4
011A:  GOTO   01C (RETURN)
.................... }
.................... 
.................... /**
....................  * @brief Muestran los creditos del proyecto
....................  * 
....................  */
.................... void creditos() {
....................     lcd_init();
....................     lcd_gotoxy(1,1);
*
02C3:  MOVLW  01
02C4:  MOVWF  4B
02C5:  MOVWF  4C
02C6:  CALL   1EC
....................     lcd_putc("\fMultimetro Dig.");
02C7:  MOVLW  89
02C8:  BSF    03.6
02C9:  MOVWF  0D
02CA:  MOVLW  00
02CB:  MOVWF  0F
02CC:  BCF    03.6
02CD:  CALL   22A
....................     lcd_gotoxy(1,2);
02CE:  MOVLW  01
02CF:  MOVWF  4B
02D0:  MOVLW  02
02D1:  MOVWF  4C
02D2:  CALL   1EC
....................     lcd_putc("EQ 6, Grupo 6");
02D3:  MOVLW  92
02D4:  BSF    03.6
02D5:  MOVWF  0D
02D6:  MOVLW  00
02D7:  MOVWF  0F
02D8:  BCF    03.6
02D9:  CALL   22A
....................     delay_ms(100);
02DA:  MOVLW  64
02DB:  MOVWF  4B
02DC:  CALL   11B
....................     lcd_gotoxy(1,1);
02DD:  MOVLW  01
02DE:  MOVWF  4B
02DF:  MOVWF  4C
02E0:  CALL   1EC
....................     lcd_putc("\fLopez Carrasco");
02E1:  MOVLW  99
02E2:  BSF    03.6
02E3:  MOVWF  0D
02E4:  MOVLW  00
02E5:  MOVWF  0F
02E6:  BCF    03.6
02E7:  CALL   22A
....................     lcd_gotoxy(1,2);
02E8:  MOVLW  01
02E9:  MOVWF  4B
02EA:  MOVLW  02
02EB:  MOVWF  4C
02EC:  CALL   1EC
....................     lcd_putc("Karla");
02ED:  MOVLW  A1
02EE:  BSF    03.6
02EF:  MOVWF  0D
02F0:  MOVLW  00
02F1:  MOVWF  0F
02F2:  BCF    03.6
02F3:  CALL   22A
....................     delay_ms(100);
02F4:  MOVLW  64
02F5:  MOVWF  4B
02F6:  CALL   11B
....................     lcd_gotoxy(1,1);
02F7:  MOVLW  01
02F8:  MOVWF  4B
02F9:  MOVWF  4C
02FA:  CALL   1EC
....................     lcd_putc("\fReyes Valderrama");
02FB:  MOVLW  A4
02FC:  BSF    03.6
02FD:  MOVWF  0D
02FE:  MOVLW  00
02FF:  MOVWF  0F
0300:  BCF    03.6
0301:  CALL   22A
....................     lcd_gotoxy(1,2);
0302:  MOVLW  01
0303:  MOVWF  4B
0304:  MOVLW  02
0305:  MOVWF  4C
0306:  CALL   1EC
....................     lcd_putc("Rodrigo Miguel");
0307:  MOVLW  AD
0308:  BSF    03.6
0309:  MOVWF  0D
030A:  MOVLW  00
030B:  MOVWF  0F
030C:  BCF    03.6
030D:  CALL   22A
....................     delay_ms(100);
030E:  MOVLW  64
030F:  MOVWF  4B
0310:  CALL   11B
0311:  BSF    0A.3
0312:  BCF    0A.4
0313:  GOTO   01F (RETURN)
.................... }
.................... 
.................... /**
....................  * @brief Muestra en lcd las opciones del menu
....................  * 
....................  */
.................... void menu_inicio() {
.................... 
....................     switch (seleccion_menu_inicio) {
0314:  MOVF   2B,W
0315:  XORLW  01
0316:  BTFSC  03.2
0317:  GOTO   31F
0318:  XORLW  03
0319:  BTFSC  03.2
031A:  GOTO   333
031B:  XORLW  01
031C:  BTFSC  03.2
031D:  GOTO   347
031E:  GOTO   35A
....................         case SELECCION_TEMPERATURA:
....................             lcd_putc("\f* Temperatura");
031F:  MOVLW  B5
0320:  BSF    03.6
0321:  MOVWF  0D
0322:  MOVLW  00
0323:  MOVWF  0F
0324:  BCF    03.6
0325:  CALL   22A
....................             lcd_gotoxy(1,2);
0326:  MOVLW  01
0327:  MOVWF  4B
0328:  MOVLW  02
0329:  MOVWF  4C
032A:  CALL   1EC
....................             lcd_putc(" Voltimetro");
032B:  MOVLW  BD
032C:  BSF    03.6
032D:  MOVWF  0D
032E:  MOVLW  00
032F:  MOVWF  0F
0330:  BCF    03.6
0331:  CALL   22A
....................             break;
0332:  GOTO   35A
....................         case SELECCION_VOLTAJE:
....................             lcd_putc("\f* Voltimetro");
0333:  MOVLW  C3
0334:  BSF    03.6
0335:  MOVWF  0D
0336:  MOVLW  00
0337:  MOVWF  0F
0338:  BCF    03.6
0339:  CALL   22A
....................             lcd_gotoxy(1,2);
033A:  MOVLW  01
033B:  MOVWF  4B
033C:  MOVLW  02
033D:  MOVWF  4C
033E:  CALL   1EC
....................             lcd_putc(" Amperimetro");
033F:  MOVLW  CA
0340:  BSF    03.6
0341:  MOVWF  0D
0342:  MOVLW  00
0343:  MOVWF  0F
0344:  BCF    03.6
0345:  CALL   22A
....................             break;
0346:  GOTO   35A
....................         case SELECCION_AMPERAJE:
....................             lcd_putc("\f Voltimetro");
0347:  MOVLW  D1
0348:  BSF    03.6
0349:  MOVWF  0D
034A:  MOVLW  00
034B:  MOVWF  0F
034C:  BCF    03.6
034D:  CALL   22A
....................             lcd_gotoxy(1,2);
034E:  MOVLW  01
034F:  MOVWF  4B
0350:  MOVLW  02
0351:  MOVWF  4C
0352:  CALL   1EC
....................             lcd_putc("* Amperimetro");
0353:  MOVLW  D8
0354:  BSF    03.6
0355:  MOVWF  0D
0356:  MOVLW  00
0357:  MOVWF  0F
0358:  BCF    03.6
0359:  CALL   22A
....................             break;
....................     }
.................... 
....................     while(!refresh);
035A:  MOVF   2D,F
035B:  BTFSC  03.2
035C:  GOTO   35A
035D:  BSF    0A.3
035E:  BCF    0A.4
035F:  GOTO   037 (RETURN)
.................... }
.................... 
.................... /**
....................  * @brief Calcula la temperatura y la muestra en el LCD
....................  * 
....................  */
.................... void mostrar_temperatura() {
*
0521:  MOVLW  DF
0522:  MOVWF  35
....................     int temperatura_entrada;
....................     float temperatura_salida;
....................     char grados = 0xDF;
.................... 
....................     set_adc_channel(0);
0523:  MOVLW  00
0524:  MOVWF  78
0525:  MOVF   1F,W
0526:  ANDLW  C7
0527:  IORWF  78,W
0528:  MOVWF  1F
....................     delay_us(40);
0529:  MOVLW  42
052A:  MOVWF  77
052B:  DECFSZ 77,F
052C:  GOTO   52B
052D:  NOP
....................     
....................     lcd_putc("\f Temperatura: ");
052E:  MOVLW  DF
052F:  BSF    03.6
0530:  MOVWF  0D
0531:  MOVLW  00
0532:  MOVWF  0F
0533:  BCF    03.6
0534:  CALL   22A
....................     while (!refresh) {
0535:  MOVF   2D,F
0536:  BTFSS  03.2
0537:  GOTO   581
....................         temperatura_entrada = read_adc();
0538:  BSF    1F.2
0539:  BTFSC  1F.2
053A:  GOTO   539
053B:  BSF    03.5
053C:  MOVF   1E,W
053D:  BCF    03.5
053E:  MOVWF  30
....................         temperatura_salida = temperatura_entrada * 0.483;
053F:  CLRF   3E
0540:  MOVF   30,W
0541:  MOVWF  3D
0542:  CALL   360
0543:  MOVF   7A,W
0544:  MOVWF  4D
0545:  MOVF   79,W
0546:  MOVWF  4C
0547:  MOVF   78,W
0548:  MOVWF  4B
0549:  MOVF   77,W
054A:  MOVWF  4A
054B:  MOVLW  C7
054C:  MOVWF  51
054D:  MOVLW  4B
054E:  MOVWF  50
054F:  MOVLW  77
0550:  MOVWF  4F
0551:  MOVLW  7D
0552:  MOVWF  4E
0553:  CALL   37D
0554:  MOVF   7A,W
0555:  MOVWF  34
0556:  MOVF   79,W
0557:  MOVWF  33
0558:  MOVF   78,W
0559:  MOVWF  32
055A:  MOVF   77,W
055B:  MOVWF  31
....................         lcd_gotoxy(1,2);
055C:  MOVLW  01
055D:  MOVWF  4B
055E:  MOVLW  02
055F:  MOVWF  4C
0560:  CALL   1EC
....................         printf(lcd_putc," %2.1f %c C", temperatura_salida, grados);
0561:  MOVLW  20
0562:  MOVWF  4A
0563:  CALL   1FE
0564:  MOVLW  01
0565:  MOVWF  04
0566:  MOVF   34,W
0567:  MOVWF  40
0568:  MOVF   33,W
0569:  MOVWF  3F
056A:  MOVF   32,W
056B:  MOVWF  3E
056C:  MOVF   31,W
056D:  MOVWF  3D
056E:  MOVLW  01
056F:  MOVWF  41
0570:  CALL   441
0571:  MOVLW  20
0572:  MOVWF  4A
0573:  CALL   1FE
0574:  MOVF   35,W
0575:  MOVWF  4A
0576:  CALL   1FE
0577:  MOVLW  20
0578:  MOVWF  4A
0579:  CALL   1FE
057A:  MOVLW  43
057B:  MOVWF  4A
057C:  CALL   1FE
....................         delay_ms(20);
057D:  MOVLW  14
057E:  MOVWF  4B
057F:  CALL   11B
0580:  GOTO   535
....................     }
0581:  BSF    0A.3
0582:  BCF    0A.4
0583:  GOTO   037 (RETURN)
.................... }
.................... 
.................... /**
....................  * @brief Calcula el voltaje y muestra en LCD
....................  * 
....................  */
.................... void mostrar_voltaje() {
....................     float voltaje;
.................... 
....................     set_adc_channel(1);
*
05DB:  MOVLW  08
05DC:  MOVWF  78
05DD:  MOVF   1F,W
05DE:  ANDLW  C7
05DF:  IORWF  78,W
05E0:  MOVWF  1F
....................     delay_us(40);
05E1:  MOVLW  42
05E2:  MOVWF  77
05E3:  DECFSZ 77,F
05E4:  GOTO   5E3
05E5:  NOP
.................... 
....................     lcd_putc("\f Voltaje: ");
05E6:  MOVLW  E7
05E7:  BSF    03.6
05E8:  MOVWF  0D
05E9:  MOVLW  00
05EA:  MOVWF  0F
05EB:  BCF    03.6
05EC:  CALL   22A
....................     while (!refresh) {
05ED:  MOVF   2D,F
05EE:  BTFSS  03.2
05EF:  GOTO   642
....................         voltaje = (float) read_adc() * ((5.0 / 1024.0) * 4.1);
05F0:  BSF    1F.2
05F1:  BTFSC  1F.2
05F2:  GOTO   5F1
05F3:  MOVF   1E,W
05F4:  MOVWF  79
05F5:  BSF    03.5
05F6:  MOVF   1E,W
05F7:  MOVWF  78
05F8:  MOVF   79,W
05F9:  MOVWF  7A
05FA:  MOVF   1E,W
05FB:  BCF    03.5
05FC:  MOVWF  3D
05FD:  MOVF   79,W
05FE:  MOVWF  3E
05FF:  CALL   360
0600:  MOVF   7A,W
0601:  MOVWF  37
0602:  MOVF   79,W
0603:  MOVWF  36
0604:  MOVF   78,W
0605:  MOVWF  35
0606:  MOVF   77,W
0607:  MOVWF  34
0608:  MOVF   7A,W
0609:  MOVWF  4D
060A:  MOVF   79,W
060B:  MOVWF  4C
060C:  MOVF   78,W
060D:  MOVWF  4B
060E:  MOVF   77,W
060F:  MOVWF  4A
0610:  CLRF   51
0611:  CLRF   50
0612:  MOVLW  24
0613:  MOVWF  4F
0614:  MOVLW  79
0615:  MOVWF  4E
0616:  CALL   37D
0617:  MOVF   7A,W
0618:  MOVWF  33
0619:  MOVF   79,W
061A:  MOVWF  32
061B:  MOVF   78,W
061C:  MOVWF  31
061D:  MOVF   77,W
061E:  MOVWF  30
....................         lcd_gotoxy(1,2);
061F:  MOVLW  01
0620:  MOVWF  4B
0621:  MOVLW  02
0622:  MOVWF  4C
0623:  CALL   1EC
....................         printf(lcd_putc," %2.2f [V]", voltaje);
0624:  MOVLW  20
0625:  MOVWF  4A
0626:  CALL   1FE
0627:  MOVLW  89
0628:  MOVWF  04
0629:  MOVF   33,W
062A:  MOVWF  40
062B:  MOVF   32,W
062C:  MOVWF  3F
062D:  MOVF   31,W
062E:  MOVWF  3E
062F:  MOVF   30,W
0630:  MOVWF  3D
0631:  MOVLW  02
0632:  MOVWF  41
0633:  CALL   441
0634:  MOVLW  F0
0635:  BSF    03.6
0636:  MOVWF  0D
0637:  MOVLW  00
0638:  MOVWF  0F
0639:  BCF    03.0
063A:  MOVLW  04
063B:  BCF    03.6
063C:  MOVWF  3D
063D:  CALL   584
....................         delay_ms(20);
063E:  MOVLW  14
063F:  MOVWF  4B
0640:  CALL   11B
0641:  GOTO   5ED
....................     }
0642:  BSF    0A.3
0643:  BCF    0A.4
0644:  GOTO   037 (RETURN)
.................... }
.................... 
.................... /**
....................  * @brief Calcula la corriente y muestra en LCD
....................  * 
....................  */
.................... void mostrar_corriente() {
0645:  MOVLW  CD
0646:  MOVWF  3B
0647:  MOVLW  CC
0648:  MOVWF  3A
0649:  MOVLW  4C
064A:  MOVWF  39
064B:  MOVLW  7B
064C:  MOVWF  38
....................     float voltaje, corriente_ma, resistencia = 0.1;
....................     int valor_entrada;
.................... 
....................     set_adc_channel(2);
064D:  MOVLW  10
064E:  MOVWF  78
064F:  MOVF   1F,W
0650:  ANDLW  C7
0651:  IORWF  78,W
0652:  MOVWF  1F
....................     delay_us(40);
0653:  MOVLW  42
0654:  MOVWF  77
0655:  DECFSZ 77,F
0656:  GOTO   655
0657:  NOP
....................     
....................     lcd_putc("\f Corriente: ");
0658:  MOVLW  F3
0659:  BSF    03.6
065A:  MOVWF  0D
065B:  MOVLW  00
065C:  MOVWF  0F
065D:  BCF    03.6
065E:  CALL   22A
....................     while (!refresh) {
065F:  MOVF   2D,F
0660:  BTFSS  03.2
0661:  GOTO   7D2
....................         valor_entrada = (float) read_adc();
0662:  BSF    1F.2
0663:  BTFSC  1F.2
0664:  GOTO   663
0665:  MOVF   1E,W
0666:  MOVWF  79
0667:  BSF    03.5
0668:  MOVF   1E,W
0669:  MOVWF  78
066A:  MOVF   79,W
066B:  MOVWF  7A
066C:  MOVF   78,W
066D:  BCF    03.5
066E:  MOVWF  3D
066F:  MOVF   7A,W
0670:  MOVWF  3E
0671:  CALL   360
0672:  MOVF   7A,W
0673:  MOVWF  40
0674:  MOVF   79,W
0675:  MOVWF  3F
0676:  MOVF   78,W
0677:  MOVWF  3E
0678:  MOVF   77,W
0679:  MOVWF  3D
*
0698:  MOVF   78,W
0699:  MOVWF  3C
....................         voltaje = valor_entrada * ((5.0 / 1023.0) * 4.09);
069A:  CLRF   3E
069B:  MOVF   3C,W
069C:  MOVWF  3D
069D:  CALL   360
069E:  MOVF   7A,W
069F:  MOVWF  4D
06A0:  MOVF   79,W
06A1:  MOVWF  4C
06A2:  MOVF   78,W
06A3:  MOVWF  4B
06A4:  MOVF   77,W
06A5:  MOVWF  4A
06A6:  MOVLW  8B
06A7:  MOVWF  51
06A8:  MOVLW  C2
06A9:  MOVWF  50
06AA:  MOVLW  23
06AB:  MOVWF  4F
06AC:  MOVLW  79
06AD:  MOVWF  4E
06AE:  CALL   37D
06AF:  MOVF   7A,W
06B0:  MOVWF  33
06B1:  MOVF   79,W
06B2:  MOVWF  32
06B3:  MOVF   78,W
06B4:  MOVWF  31
06B5:  MOVF   77,W
06B6:  MOVWF  30
....................         corriente_ma = (voltaje / resistencia) * 1000;
06B7:  MOVF   33,W
06B8:  MOVWF  40
06B9:  MOVF   32,W
06BA:  MOVWF  3F
06BB:  MOVF   31,W
06BC:  MOVWF  3E
06BD:  MOVF   30,W
06BE:  MOVWF  3D
06BF:  MOVF   3B,W
06C0:  MOVWF  44
06C1:  MOVF   3A,W
06C2:  MOVWF  43
06C3:  MOVF   39,W
06C4:  MOVWF  42
06C5:  MOVF   38,W
06C6:  MOVWF  41
*
0790:  MOVF   7A,W
0791:  MOVWF  40
0792:  MOVF   79,W
0793:  MOVWF  3F
0794:  MOVF   78,W
0795:  MOVWF  3E
0796:  MOVF   77,W
0797:  MOVWF  3D
0798:  MOVF   7A,W
0799:  MOVWF  4D
079A:  MOVF   79,W
079B:  MOVWF  4C
079C:  MOVF   78,W
079D:  MOVWF  4B
079E:  MOVF   77,W
079F:  MOVWF  4A
07A0:  CLRF   51
07A1:  CLRF   50
07A2:  MOVLW  7A
07A3:  MOVWF  4F
07A4:  MOVLW  88
07A5:  MOVWF  4E
07A6:  CALL   37D
07A7:  MOVF   7A,W
07A8:  MOVWF  37
07A9:  MOVF   79,W
07AA:  MOVWF  36
07AB:  MOVF   78,W
07AC:  MOVWF  35
07AD:  MOVF   77,W
07AE:  MOVWF  34
....................         lcd_gotoxy(1,2);
07AF:  MOVLW  01
07B0:  MOVWF  4B
07B1:  MOVLW  02
07B2:  MOVWF  4C
07B3:  CALL   1EC
....................         printf(lcd_putc," %2.2f [mA]", corriente_ma);
07B4:  MOVLW  20
07B5:  MOVWF  4A
07B6:  CALL   1FE
07B7:  MOVLW  89
07B8:  MOVWF  04
07B9:  MOVF   37,W
07BA:  MOVWF  40
07BB:  MOVF   36,W
07BC:  MOVWF  3F
07BD:  MOVF   35,W
07BE:  MOVWF  3E
07BF:  MOVF   34,W
07C0:  MOVWF  3D
07C1:  MOVLW  02
07C2:  MOVWF  41
07C3:  CALL   441
07C4:  MOVLW  FD
07C5:  BSF    03.6
07C6:  MOVWF  0D
07C7:  MOVLW  00
07C8:  MOVWF  0F
07C9:  BCF    03.0
07CA:  MOVLW  05
07CB:  BCF    03.6
07CC:  MOVWF  3D
07CD:  CALL   584
....................         delay_ms(20);
07CE:  MOVLW  14
07CF:  MOVWF  4B
07D0:  CALL   11B
07D1:  GOTO   65F
....................     }
07D2:  BSF    0A.3
07D3:  BCF    0A.4
07D4:  GOTO   037 (RETURN)
.................... }

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
