CCS PCM C Compiler, Version 5.093, 4770               10-nov.-24 19:57

               Filename:   C:\Users\thefo\Desktop\MultimetroMicrocontrolador\Codigo Fuente\multimetro.lst

               ROM used:   2032 words (25%)
                           Largest free fragment is 2048
               RAM used:   21 (6%) at main() level
                           60 (16%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

0000:  MOVLW  07
0001:  MOVWF  0A
0002:  GOTO   7BC
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.3
0028:  GOTO   02B
0029:  BTFSC  0B.0
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   04F
.................... #include <16f877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
*
0089:  DATA 8C,26
008A:  DATA 75,36
008B:  DATA F4,34
008C:  DATA ED,32
008D:  DATA 74,39
008E:  DATA 6F,10
008F:  DATA C4,34
0090:  DATA 67,17
0091:  DATA 00,00
0092:  DATA C5,28
0093:  DATA 20,1B
0094:  DATA 2C,10
0095:  DATA 47,39
0096:  DATA 75,38
0097:  DATA 6F,10
0098:  DATA 36,00
0099:  DATA 0C,26
009A:  DATA 6F,38
009B:  DATA 65,3D
009C:  DATA A0,21
009D:  DATA 61,39
009E:  DATA F2,30
009F:  DATA F3,31
00A0:  DATA 6F,00
00A1:  DATA CB,30
00A2:  DATA 72,36
00A3:  DATA 61,00
00A4:  DATA 0C,29
00A5:  DATA E5,3C
00A6:  DATA E5,39
00A7:  DATA 20,2B
00A8:  DATA 61,36
00A9:  DATA E4,32
00AA:  DATA 72,39
00AB:  DATA E1,36
00AC:  DATA 61,00
00AD:  DATA D2,37
00AE:  DATA 64,39
00AF:  DATA E9,33
00B0:  DATA 6F,10
00B1:  DATA CD,34
00B2:  DATA E7,3A
00B3:  DATA 65,36
00B4:  DATA 00,00
00B5:  DATA 8C,16
00B6:  DATA 3E,1F
00B7:  DATA 20,2B
00B8:  DATA 6F,36
00B9:  DATA F4,34
00BA:  DATA ED,32
00BB:  DATA 74,39
00BC:  DATA 6F,00
00BD:  DATA A0,20
00BE:  DATA 6D,38
00BF:  DATA 65,39
00C0:  DATA E9,36
00C1:  DATA 65,3A
00C2:  DATA F2,37
00C3:  DATA 00,01
00C4:  DATA 8C,16
00C5:  DATA 3E,1F
00C6:  DATA A0,20
00C7:  DATA 6D,38
00C8:  DATA 65,39
00C9:  DATA E9,36
00CA:  DATA 65,3A
00CB:  DATA F2,37
00CC:  DATA 00,01
00CD:  DATA 20,2A
00CE:  DATA E5,36
00CF:  DATA F0,32
00D0:  DATA F2,30
00D1:  DATA F4,3A
00D2:  DATA F2,30
00D3:  DATA 00,01
00D4:  DATA 0C,10
00D5:  DATA C1,36
00D6:  DATA F0,32
00D7:  DATA F2,34
00D8:  DATA ED,32
00D9:  DATA 74,39
00DA:  DATA 6F,00
00DB:  DATA 2D,1F
00DC:  DATA 3E,10
00DD:  DATA D4,32
00DE:  DATA 6D,38
00DF:  DATA 65,39
00E0:  DATA 61,3A
00E1:  DATA 75,39
00E2:  DATA 61,00
00E3:  DATA 0C,10
00E4:  DATA D4,32
00E5:  DATA 6D,38
00E6:  DATA 65,39
00E7:  DATA 61,3A
00E8:  DATA 75,39
00E9:  DATA 61,1D
00EA:  DATA 20,00
00EB:  DATA 0C,10
00EC:  DATA D6,37
00ED:  DATA 6C,3A
00EE:  DATA 61,35
00EF:  DATA 65,1D
00F0:  DATA 20,00
00F1:  DATA A0,12
00F2:  DATA 32,17
00F3:  DATA 32,33
00F4:  DATA A0,2D
00F5:  DATA D6,2E
00F6:  DATA 00,00
00F7:  DATA 0C,10
00F8:  DATA C3,37
00F9:  DATA 72,39
00FA:  DATA E9,32
00FB:  DATA 6E,3A
00FC:  DATA 65,1D
00FD:  DATA 20,00
00FE:  DATA A0,12
00FF:  DATA 32,17
0100:  DATA 32,33
0101:  DATA A0,2D
0102:  DATA C1,2E
0103:  DATA 00,00
*
022E:  MOVF   0B,W
022F:  MOVWF  3D
0230:  BCF    0B.7
0231:  BSF    03.5
0232:  BSF    03.6
0233:  BSF    0C.7
0234:  BSF    0C.0
0235:  NOP
0236:  NOP
0237:  BCF    03.5
0238:  BCF    03.6
0239:  BTFSC  3D.7
023A:  BSF    0B.7
023B:  BSF    03.6
023C:  MOVF   0C,W
023D:  ANDLW  7F
023E:  BTFSC  03.2
023F:  GOTO   282
0240:  BCF    03.6
0241:  MOVWF  3D
0242:  BSF    03.6
0243:  MOVF   0D,W
0244:  BCF    03.6
0245:  MOVWF  3E
0246:  BSF    03.6
0247:  MOVF   0F,W
0248:  BCF    03.6
0249:  MOVWF  3F
024A:  MOVF   3D,W
024B:  MOVWF  4A
024C:  CALL   202
024D:  MOVF   3E,W
024E:  BSF    03.6
024F:  MOVWF  0D
0250:  BCF    03.6
0251:  MOVF   3F,W
0252:  BSF    03.6
0253:  MOVWF  0F
0254:  BCF    03.6
0255:  MOVF   0B,W
0256:  MOVWF  40
0257:  BCF    0B.7
0258:  BSF    03.5
0259:  BSF    03.6
025A:  BSF    0C.7
025B:  BSF    0C.0
025C:  NOP
025D:  NOP
025E:  BCF    03.5
025F:  BCF    03.6
0260:  BTFSC  40.7
0261:  BSF    0B.7
0262:  BSF    03.6
0263:  RLF    0C,W
0264:  RLF    0E,W
0265:  ANDLW  7F
0266:  BTFSC  03.2
0267:  GOTO   282
0268:  BCF    03.6
0269:  MOVWF  3D
026A:  BSF    03.6
026B:  MOVF   0D,W
026C:  BCF    03.6
026D:  MOVWF  3E
026E:  BSF    03.6
026F:  MOVF   0F,W
0270:  BCF    03.6
0271:  MOVWF  3F
0272:  MOVF   3D,W
0273:  MOVWF  4A
0274:  CALL   202
0275:  MOVF   3E,W
0276:  BSF    03.6
0277:  MOVWF  0D
0278:  BCF    03.6
0279:  MOVF   3F,W
027A:  BSF    03.6
027B:  MOVWF  0F
027C:  INCF   0D,F
027D:  BTFSC  03.2
027E:  INCF   0F,F
027F:  BCF    03.6
0280:  GOTO   22E
0281:  BSF    03.6
0282:  BCF    03.6
0283:  RETURN
*
0364:  MOVLW  8E
0365:  MOVWF  77
0366:  MOVF   3E,W
0367:  MOVWF  78
0368:  MOVF   3D,W
0369:  MOVWF  79
036A:  CLRF   7A
036B:  MOVF   78,F
036C:  BTFSS  03.2
036D:  GOTO   378
036E:  MOVF   79,W
036F:  MOVWF  78
0370:  CLRF   79
0371:  MOVLW  08
0372:  SUBWF  77,F
0373:  MOVF   78,F
0374:  BTFSS  03.2
0375:  GOTO   378
0376:  CLRF   77
0377:  GOTO   380
0378:  BCF    03.0
0379:  BTFSC  78.7
037A:  GOTO   37F
037B:  RLF    79,F
037C:  RLF    78,F
037D:  DECF   77,F
037E:  GOTO   378
037F:  BCF    78.7
0380:  RETURN
0381:  MOVF   4A,W
0382:  BTFSC  03.2
0383:  GOTO   3F1
0384:  MOVWF  52
0385:  MOVF   4E,W
0386:  BTFSC  03.2
0387:  GOTO   3F1
0388:  ADDWF  52,F
0389:  BTFSC  03.0
038A:  GOTO   392
038B:  MOVLW  7F
038C:  SUBWF  52,F
038D:  BTFSS  03.0
038E:  GOTO   3F1
038F:  BTFSC  03.2
0390:  GOTO   3F1
0391:  GOTO   396
0392:  MOVLW  81
0393:  ADDWF  52,F
0394:  BTFSC  03.0
0395:  GOTO   3F1
0396:  MOVF   52,W
0397:  MOVWF  77
0398:  CLRF   78
0399:  CLRF   79
039A:  CLRF   7A
039B:  MOVF   4B,W
039C:  MOVWF  56
039D:  BSF    56.7
039E:  MOVF   4C,W
039F:  MOVWF  55
03A0:  MOVF   4D,W
03A1:  MOVWF  54
03A2:  MOVLW  18
03A3:  MOVWF  52
03A4:  CLRF   53
03A5:  BTFSS  54.0
03A6:  GOTO   3BF
03A7:  MOVF   51,W
03A8:  ADDWF  7A,F
03A9:  BTFSS  03.0
03AA:  GOTO   3B1
03AB:  INCF   79,F
03AC:  BTFSS  03.2
03AD:  GOTO   3B1
03AE:  INCF   78,F
03AF:  BTFSC  03.2
03B0:  BSF    53.7
03B1:  MOVF   50,W
03B2:  ADDWF  79,F
03B3:  BTFSS  03.0
03B4:  GOTO   3B8
03B5:  INCF   78,F
03B6:  BTFSC  03.2
03B7:  BSF    53.7
03B8:  MOVF   4F,W
03B9:  MOVWF  4C
03BA:  BSF    4C.7
03BB:  MOVF   4C,W
03BC:  ADDWF  78,F
03BD:  BTFSC  03.0
03BE:  BSF    53.7
03BF:  RLF    53,F
03C0:  RRF    78,F
03C1:  RRF    79,F
03C2:  RRF    7A,F
03C3:  RRF    56,F
03C4:  RRF    55,F
03C5:  RRF    54,F
03C6:  BCF    03.0
03C7:  DECFSZ 52,F
03C8:  GOTO   3A4
03C9:  MOVLW  01
03CA:  ADDWF  77,F
03CB:  BTFSC  03.0
03CC:  GOTO   3F1
03CD:  BTFSC  78.7
03CE:  GOTO   3D6
03CF:  RLF    56,F
03D0:  RLF    7A,F
03D1:  RLF    79,F
03D2:  RLF    78,F
03D3:  DECF   77,F
03D4:  BTFSC  03.2
03D5:  GOTO   3F1
03D6:  BTFSS  56.7
03D7:  GOTO   3E7
03D8:  INCF   7A,F
03D9:  BTFSS  03.2
03DA:  GOTO   3E7
03DB:  INCF   79,F
03DC:  BTFSS  03.2
03DD:  GOTO   3E7
03DE:  INCF   78,F
03DF:  BTFSS  03.2
03E0:  GOTO   3E7
03E1:  RRF    78,F
03E2:  RRF    79,F
03E3:  RRF    7A,F
03E4:  INCF   77,F
03E5:  BTFSC  03.2
03E6:  GOTO   3F1
03E7:  MOVF   4B,W
03E8:  MOVWF  53
03E9:  MOVF   4F,W
03EA:  XORWF  53,F
03EB:  BTFSS  53.7
03EC:  GOTO   3EF
03ED:  BSF    78.7
03EE:  GOTO   3F5
03EF:  BCF    78.7
03F0:  GOTO   3F5
03F1:  CLRF   77
03F2:  CLRF   78
03F3:  CLRF   79
03F4:  CLRF   7A
03F5:  RETURN
03F6:  BTFSC  03.1
03F7:  GOTO   3FB
03F8:  MOVLW  52
03F9:  MOVWF  04
03FA:  BCF    03.7
03FB:  CLRF   77
03FC:  CLRF   78
03FD:  CLRF   79
03FE:  CLRF   7A
03FF:  CLRF   52
0400:  CLRF   53
0401:  CLRF   54
0402:  CLRF   55
0403:  MOVF   51,W
0404:  IORWF  50,W
0405:  IORWF  4F,W
0406:  IORWF  4E,W
0407:  BTFSC  03.2
0408:  GOTO   439
0409:  MOVLW  20
040A:  MOVWF  56
040B:  BCF    03.0
040C:  RLF    4A,F
040D:  RLF    4B,F
040E:  RLF    4C,F
040F:  RLF    4D,F
0410:  RLF    52,F
0411:  RLF    53,F
0412:  RLF    54,F
0413:  RLF    55,F
0414:  MOVF   51,W
0415:  SUBWF  55,W
0416:  BTFSS  03.2
0417:  GOTO   422
0418:  MOVF   50,W
0419:  SUBWF  54,W
041A:  BTFSS  03.2
041B:  GOTO   422
041C:  MOVF   4F,W
041D:  SUBWF  53,W
041E:  BTFSS  03.2
041F:  GOTO   422
0420:  MOVF   4E,W
0421:  SUBWF  52,W
0422:  BTFSS  03.0
0423:  GOTO   433
0424:  MOVF   4E,W
0425:  SUBWF  52,F
0426:  MOVF   4F,W
0427:  BTFSS  03.0
0428:  INCFSZ 4F,W
0429:  SUBWF  53,F
042A:  MOVF   50,W
042B:  BTFSS  03.0
042C:  INCFSZ 50,W
042D:  SUBWF  54,F
042E:  MOVF   51,W
042F:  BTFSS  03.0
0430:  INCFSZ 51,W
0431:  SUBWF  55,F
0432:  BSF    03.0
0433:  RLF    77,F
0434:  RLF    78,F
0435:  RLF    79,F
0436:  RLF    7A,F
0437:  DECFSZ 56,F
0438:  GOTO   40B
0439:  MOVF   52,W
043A:  MOVWF  00
043B:  INCF   04,F
043C:  MOVF   53,W
043D:  MOVWF  00
043E:  INCF   04,F
043F:  MOVF   54,W
0440:  MOVWF  00
0441:  INCF   04,F
0442:  MOVF   55,W
0443:  MOVWF  00
0444:  RETURN
0445:  MOVF   04,W
0446:  MOVWF  42
0447:  MOVF   41,W
0448:  MOVWF  44
0449:  BTFSC  03.2
044A:  GOTO   464
044B:  MOVF   40,W
044C:  MOVWF  4D
044D:  MOVF   3F,W
044E:  MOVWF  4C
044F:  MOVF   3E,W
0450:  MOVWF  4B
0451:  MOVF   3D,W
0452:  MOVWF  4A
0453:  CLRF   51
0454:  CLRF   50
0455:  MOVLW  20
0456:  MOVWF  4F
0457:  MOVLW  82
0458:  MOVWF  4E
0459:  CALL   381
045A:  MOVF   7A,W
045B:  MOVWF  40
045C:  MOVF   79,W
045D:  MOVWF  3F
045E:  MOVF   78,W
045F:  MOVWF  3E
0460:  MOVF   77,W
0461:  MOVWF  3D
0462:  DECFSZ 44,F
0463:  GOTO   44B
0464:  MOVF   40,W
0465:  MOVWF  4D
0466:  MOVF   3F,W
0467:  MOVWF  4C
0468:  MOVF   3E,W
0469:  MOVWF  4B
046A:  MOVF   3D,W
046B:  MOVWF  4A
046C:  MOVF   4A,W
046D:  SUBLW  B6
046E:  MOVWF  4A
046F:  CLRF   7A
0470:  MOVF   4B,W
0471:  MOVWF  4E
0472:  BSF    4B.7
0473:  BCF    03.0
0474:  RRF    4B,F
0475:  RRF    4C,F
0476:  RRF    4D,F
0477:  RRF    7A,F
0478:  RRF    79,F
0479:  RRF    78,F
047A:  RRF    77,F
047B:  DECFSZ 4A,F
047C:  GOTO   473
047D:  BTFSS  4E.7
047E:  GOTO   48A
047F:  COMF   77,F
0480:  COMF   78,F
0481:  COMF   79,F
0482:  COMF   7A,F
0483:  INCF   77,F
0484:  BTFSC  03.2
0485:  INCF   78,F
0486:  BTFSC  03.2
0487:  INCF   79,F
0488:  BTFSC  03.2
0489:  INCF   7A,F
048A:  MOVF   7A,W
048B:  MOVWF  40
048C:  MOVF   79,W
048D:  MOVWF  3F
048E:  MOVF   78,W
048F:  MOVWF  3E
0490:  MOVF   77,W
0491:  MOVWF  3D
0492:  BTFSS  40.7
0493:  GOTO   4A1
0494:  DECF   42,F
0495:  BSF    42.5
0496:  COMF   3D,F
0497:  COMF   3E,F
0498:  COMF   3F,F
0499:  COMF   40,F
049A:  INCF   3D,F
049B:  BTFSC  03.2
049C:  INCF   3E,F
049D:  BTFSC  03.2
049E:  INCF   3F,F
049F:  BTFSC  03.2
04A0:  INCF   40,F
04A1:  MOVLW  3B
04A2:  MOVWF  49
04A3:  MOVLW  9A
04A4:  MOVWF  48
04A5:  MOVLW  CA
04A6:  MOVWF  47
04A7:  CLRF   46
04A8:  MOVLW  0A
04A9:  MOVWF  44
04AA:  MOVF   41,W
04AB:  BTFSC  03.2
04AC:  INCF   42,F
04AD:  BSF    03.1
04AE:  MOVLW  3D
04AF:  MOVWF  04
04B0:  BCF    03.7
04B1:  MOVF   40,W
04B2:  MOVWF  4D
04B3:  MOVF   3F,W
04B4:  MOVWF  4C
04B5:  MOVF   3E,W
04B6:  MOVWF  4B
04B7:  MOVF   3D,W
04B8:  MOVWF  4A
04B9:  MOVF   49,W
04BA:  MOVWF  51
04BB:  MOVF   48,W
04BC:  MOVWF  50
04BD:  MOVF   47,W
04BE:  MOVWF  4F
04BF:  MOVF   46,W
04C0:  MOVWF  4E
04C1:  CALL   3F6
04C2:  MOVF   78,W
04C3:  MOVF   77,F
04C4:  BTFSS  03.2
04C5:  GOTO   4D9
04C6:  INCF   41,W
04C7:  SUBWF  44,W
04C8:  BTFSC  03.2
04C9:  GOTO   4D9
04CA:  MOVF   42,W
04CB:  BTFSC  03.2
04CC:  GOTO   4DB
04CD:  ANDLW  0F
04CE:  SUBWF  44,W
04CF:  BTFSC  03.2
04D0:  GOTO   4D3
04D1:  BTFSC  03.0
04D2:  GOTO   50B
04D3:  BTFSC  42.7
04D4:  GOTO   50B
04D5:  BTFSC  42.6
04D6:  GOTO   4DB
04D7:  MOVLW  20
04D8:  GOTO   507
04D9:  MOVLW  20
04DA:  ANDWF  42,F
04DB:  BTFSS  42.5
04DC:  GOTO   4E9
04DD:  BCF    42.5
04DE:  MOVF   41,W
04DF:  BTFSS  03.2
04E0:  DECF   42,F
04E1:  MOVF   77,W
04E2:  MOVWF  42
04E3:  MOVLW  2D
04E4:  MOVWF  4A
04E5:  CALL   202
04E6:  MOVF   42,W
04E7:  MOVWF  77
04E8:  CLRF   42
04E9:  MOVF   41,W
04EA:  SUBWF  44,W
04EB:  BTFSS  03.2
04EC:  GOTO   4F7
04ED:  MOVF   77,W
04EE:  MOVWF  42
04EF:  MOVLW  2E
04F0:  MOVWF  4A
04F1:  CALL   202
04F2:  MOVF   42,W
04F3:  MOVWF  77
04F4:  MOVLW  20
04F5:  ANDWF  42,F
04F6:  MOVLW  00
04F7:  MOVLW  30
04F8:  BTFSS  42.5
04F9:  GOTO   507
04FA:  BCF    42.5
04FB:  MOVF   41,W
04FC:  BTFSS  03.2
04FD:  DECF   42,F
04FE:  MOVF   77,W
04FF:  MOVWF  42
0500:  MOVLW  2D
0501:  MOVWF  4A
0502:  CALL   202
0503:  MOVF   42,W
0504:  MOVWF  77
0505:  CLRF   42
0506:  MOVLW  30
0507:  ADDWF  77,F
0508:  MOVF   77,W
0509:  MOVWF  4A
050A:  CALL   202
050B:  BCF    03.1
050C:  MOVF   49,W
050D:  MOVWF  4D
050E:  MOVF   48,W
050F:  MOVWF  4C
0510:  MOVF   47,W
0511:  MOVWF  4B
0512:  MOVF   46,W
0513:  MOVWF  4A
0514:  CLRF   51
0515:  CLRF   50
0516:  CLRF   4F
0517:  MOVLW  0A
0518:  MOVWF  4E
0519:  CALL   3F6
051A:  MOVF   7A,W
051B:  MOVWF  49
051C:  MOVF   79,W
051D:  MOVWF  48
051E:  MOVF   78,W
051F:  MOVWF  47
0520:  MOVF   77,W
0521:  MOVWF  46
0522:  DECFSZ 44,F
0523:  GOTO   4AD
0524:  RETURN
0525:  MOVF   0B,W
0526:  MOVWF  3E
0527:  BCF    0B.7
0528:  BSF    03.5
0529:  BSF    03.6
052A:  BSF    0C.7
052B:  BSF    0C.0
052C:  NOP
052D:  NOP
052E:  BCF    03.5
052F:  BCF    03.6
0530:  BTFSC  3E.7
0531:  BSF    0B.7
0532:  BTFSC  03.0
0533:  GOTO   55C
0534:  BSF    03.6
0535:  MOVF   0C,W
0536:  ANDLW  7F
0537:  BCF    03.6
0538:  MOVWF  3E
0539:  BSF    03.6
053A:  MOVF   0D,W
053B:  BCF    03.6
053C:  MOVWF  3F
053D:  BSF    03.6
053E:  MOVF   0F,W
053F:  BCF    03.6
0540:  MOVWF  40
0541:  MOVF   3E,W
0542:  MOVWF  4A
0543:  CALL   202
0544:  MOVF   3F,W
0545:  BSF    03.6
0546:  MOVWF  0D
0547:  BCF    03.6
0548:  MOVF   40,W
0549:  BSF    03.6
054A:  MOVWF  0F
054B:  BCF    03.6
054C:  MOVF   0B,W
054D:  MOVWF  41
054E:  BCF    0B.7
054F:  BSF    03.5
0550:  BSF    03.6
0551:  BSF    0C.7
0552:  BSF    0C.0
0553:  NOP
0554:  NOP
0555:  BCF    03.5
0556:  BCF    03.6
0557:  BTFSC  41.7
0558:  BSF    0B.7
0559:  DECFSZ 3D,F
055A:  GOTO   55C
055B:  GOTO   57B
055C:  BSF    03.6
055D:  RLF    0C,W
055E:  RLF    0E,W
055F:  ANDLW  7F
0560:  BCF    03.6
0561:  MOVWF  3E
0562:  BSF    03.6
0563:  MOVF   0D,W
0564:  BCF    03.6
0565:  MOVWF  3F
0566:  BSF    03.6
0567:  MOVF   0F,W
0568:  BCF    03.6
0569:  MOVWF  40
056A:  MOVF   3E,W
056B:  MOVWF  4A
056C:  CALL   202
056D:  MOVF   3F,W
056E:  BSF    03.6
056F:  MOVWF  0D
0570:  BCF    03.6
0571:  MOVF   40,W
0572:  BSF    03.6
0573:  MOVWF  0F
0574:  INCF   0D,F
0575:  BTFSC  03.2
0576:  INCF   0F,F
0577:  BCF    03.0
0578:  BCF    03.6
0579:  DECFSZ 3D,F
057A:  GOTO   525
057B:  RETURN
*
061B:  MOVLW  8E
061C:  MOVWF  77
061D:  MOVF   3D,W
061E:  SUBWF  77,F
061F:  MOVF   3E,W
0620:  MOVWF  79
0621:  MOVF   3F,W
0622:  MOVWF  78
0623:  BSF    79.7
0624:  MOVF   77,F
0625:  BTFSC  03.2
0626:  GOTO   632
0627:  BCF    03.0
0628:  MOVF   79,F
0629:  BTFSS  03.2
062A:  GOTO   62E
062B:  MOVF   78,F
062C:  BTFSC  03.2
062D:  GOTO   632
062E:  RRF    79,F
062F:  RRF    78,F
0630:  DECFSZ 77,F
0631:  GOTO   627
0632:  BTFSS  3E.7
0633:  GOTO   639
0634:  COMF   78,F
0635:  COMF   79,F
0636:  INCF   78,F
0637:  BTFSC  03.2
0638:  INCF   79,F
*
0668:  MOVF   3D,W
0669:  BTFSC  03.2
066A:  GOTO   72D
066B:  MOVWF  49
066C:  MOVF   41,W
066D:  BTFSC  03.2
066E:  GOTO   72D
066F:  SUBWF  49,F
0670:  BTFSS  03.0
0671:  GOTO   677
0672:  MOVLW  7F
0673:  ADDWF  49,F
0674:  BTFSC  03.0
0675:  GOTO   72D
0676:  GOTO   67D
0677:  MOVLW  81
0678:  SUBWF  49,F
0679:  BTFSS  03.0
067A:  GOTO   72D
067B:  BTFSC  03.2
067C:  GOTO   72D
067D:  MOVF   49,W
067E:  MOVWF  77
067F:  CLRF   78
0680:  CLRF   79
0681:  CLRF   7A
0682:  CLRF   48
0683:  MOVF   3E,W
0684:  MOVWF  47
0685:  BSF    47.7
0686:  MOVF   3F,W
0687:  MOVWF  46
0688:  MOVF   40,W
0689:  MOVWF  45
068A:  MOVLW  19
068B:  MOVWF  49
068C:  MOVF   44,W
068D:  SUBWF  45,F
068E:  BTFSC  03.0
068F:  GOTO   6A0
0690:  MOVLW  01
0691:  SUBWF  46,F
0692:  BTFSC  03.0
0693:  GOTO   6A0
0694:  SUBWF  47,F
0695:  BTFSC  03.0
0696:  GOTO   6A0
0697:  SUBWF  48,F
0698:  BTFSC  03.0
0699:  GOTO   6A0
069A:  INCF   48,F
069B:  INCF   47,F
069C:  INCF   46,F
069D:  MOVF   44,W
069E:  ADDWF  45,F
069F:  GOTO   6D2
06A0:  MOVF   43,W
06A1:  SUBWF  46,F
06A2:  BTFSC  03.0
06A3:  GOTO   6BB
06A4:  MOVLW  01
06A5:  SUBWF  47,F
06A6:  BTFSC  03.0
06A7:  GOTO   6BB
06A8:  SUBWF  48,F
06A9:  BTFSC  03.0
06AA:  GOTO   6BB
06AB:  INCF   48,F
06AC:  INCF   47,F
06AD:  MOVF   43,W
06AE:  ADDWF  46,F
06AF:  MOVF   44,W
06B0:  ADDWF  45,F
06B1:  BTFSS  03.0
06B2:  GOTO   6D2
06B3:  INCF   46,F
06B4:  BTFSS  03.2
06B5:  GOTO   6D2
06B6:  INCF   47,F
06B7:  BTFSS  03.2
06B8:  GOTO   6D2
06B9:  INCF   48,F
06BA:  GOTO   6D2
06BB:  MOVF   42,W
06BC:  IORLW  80
06BD:  SUBWF  47,F
06BE:  BTFSC  03.0
06BF:  GOTO   6D1
06C0:  MOVLW  01
06C1:  SUBWF  48,F
06C2:  BTFSC  03.0
06C3:  GOTO   6D1
06C4:  INCF   48,F
06C5:  MOVF   42,W
06C6:  IORLW  80
06C7:  ADDWF  47,F
06C8:  MOVF   43,W
06C9:  ADDWF  46,F
06CA:  BTFSS  03.0
06CB:  GOTO   6AF
06CC:  INCF   47,F
06CD:  BTFSS  03.2
06CE:  GOTO   6AF
06CF:  INCF   48,F
06D0:  GOTO   6AF
06D1:  BSF    7A.0
06D2:  DECFSZ 49,F
06D3:  GOTO   6D5
06D4:  GOTO   6E0
06D5:  BCF    03.0
06D6:  RLF    45,F
06D7:  RLF    46,F
06D8:  RLF    47,F
06D9:  RLF    48,F
06DA:  BCF    03.0
06DB:  RLF    7A,F
06DC:  RLF    79,F
06DD:  RLF    78,F
06DE:  RLF    4A,F
06DF:  GOTO   68C
06E0:  BTFSS  4A.0
06E1:  GOTO   6E8
06E2:  BCF    03.0
06E3:  RRF    78,F
06E4:  RRF    79,F
06E5:  RRF    7A,F
06E6:  RRF    4A,F
06E7:  GOTO   6EB
06E8:  DECF   77,F
06E9:  BTFSC  03.2
06EA:  GOTO   72D
06EB:  BTFSC  4A.7
06EC:  GOTO   714
06ED:  BCF    03.0
06EE:  RLF    45,F
06EF:  RLF    46,F
06F0:  RLF    47,F
06F1:  RLF    48,F
06F2:  MOVF   44,W
06F3:  SUBWF  45,F
06F4:  BTFSC  03.0
06F5:  GOTO   700
06F6:  MOVLW  01
06F7:  SUBWF  46,F
06F8:  BTFSC  03.0
06F9:  GOTO   700
06FA:  SUBWF  47,F
06FB:  BTFSC  03.0
06FC:  GOTO   700
06FD:  SUBWF  48,F
06FE:  BTFSS  03.0
06FF:  GOTO   723
0700:  MOVF   43,W
0701:  SUBWF  46,F
0702:  BTFSC  03.0
0703:  GOTO   70B
0704:  MOVLW  01
0705:  SUBWF  47,F
0706:  BTFSC  03.0
0707:  GOTO   70B
0708:  SUBWF  48,F
0709:  BTFSS  03.0
070A:  GOTO   723
070B:  MOVF   42,W
070C:  IORLW  80
070D:  SUBWF  47,F
070E:  BTFSC  03.0
070F:  GOTO   714
0710:  MOVLW  01
0711:  SUBWF  48,F
0712:  BTFSS  03.0
0713:  GOTO   723
0714:  INCF   7A,F
0715:  BTFSS  03.2
0716:  GOTO   723
0717:  INCF   79,F
0718:  BTFSS  03.2
0719:  GOTO   723
071A:  INCF   78,F
071B:  BTFSS  03.2
071C:  GOTO   723
071D:  INCF   77,F
071E:  BTFSC  03.2
071F:  GOTO   72D
0720:  RRF    78,F
0721:  RRF    79,F
0722:  RRF    7A,F
0723:  MOVF   3E,W
0724:  MOVWF  49
0725:  MOVF   42,W
0726:  XORWF  49,F
0727:  BTFSS  49.7
0728:  GOTO   72B
0729:  BSF    78.7
072A:  GOTO   731
072B:  BCF    78.7
072C:  GOTO   731
072D:  CLRF   77
072E:  CLRF   78
072F:  CLRF   79
0730:  CLRF   7A
*
07E8:  BSF    0A.0
07E9:  BSF    0A.1
07EA:  BSF    0A.2
07EB:  ADDWF  02,F
07EC:  GOTO   7DF
07ED:  GOTO   7E1
07EE:  GOTO   7E3
07EF:  GOTO   7E5
.................... 
.................... #list
.................... 
.................... 
.................... #fuses HS, NOPROTECT, NOLVP
.................... #device ADC=10
.................... #use delay(clock=20M)
*
011F:  MOVLW  4B
0120:  MOVWF  04
0121:  BCF    03.7
0122:  MOVF   00,W
0123:  BTFSC  03.2
0124:  GOTO   132
0125:  MOVLW  06
0126:  MOVWF  78
0127:  CLRF   77
0128:  DECFSZ 77,F
0129:  GOTO   128
012A:  DECFSZ 78,F
012B:  GOTO   127
012C:  MOVLW  7B
012D:  MOVWF  77
012E:  DECFSZ 77,F
012F:  GOTO   12E
0130:  DECFSZ 00,F
0131:  GOTO   125
0132:  RETURN
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7)
.................... 
.................... // LCD Module Connections
.................... #define LCD_RS_PIN PIN_D7
.................... #define LCD_RW_PIN PIN_D0
.................... #define LCD_ENABLE_PIN PIN_D6
.................... #define LCD_DATA4 PIN_D5
.................... #define LCD_DATA5 PIN_D4
.................... #define LCD_DATA6 PIN_D3
.................... #define LCD_DATA7 PIN_D2
.................... //End LCD Module Connections
.................... 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
019A:  BSF    08.5
....................    output_float(LCD_DATA5);
019B:  BSF    08.4
....................    output_float(LCD_DATA6);
019C:  BSF    08.3
....................    output_float(LCD_DATA7);
019D:  BSF    08.2
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
019E:  BCF    03.5
019F:  BSF    08.0
01A0:  BSF    03.5
01A1:  BCF    08.0
....................    delay_cycles(1);
01A2:  NOP
....................    lcd_output_enable(1);
01A3:  BCF    03.5
01A4:  BSF    08.6
01A5:  BSF    03.5
01A6:  BCF    08.6
....................    delay_cycles(1);
01A7:  NOP
....................    high = lcd_read_nibble();
01A8:  BCF    03.5
01A9:  CALL   161
01AA:  MOVF   78,W
01AB:  MOVWF  52
....................       
....................    lcd_output_enable(0);
01AC:  BCF    08.6
01AD:  BSF    03.5
01AE:  BCF    08.6
....................    delay_cycles(1);
01AF:  NOP
....................    lcd_output_enable(1);
01B0:  BCF    03.5
01B1:  BSF    08.6
01B2:  BSF    03.5
01B3:  BCF    08.6
....................    delay_us(1);
01B4:  GOTO   1B5
01B5:  GOTO   1B6
01B6:  NOP
....................    low = lcd_read_nibble();
01B7:  BCF    03.5
01B8:  CALL   161
01B9:  MOVF   78,W
01BA:  MOVWF  51
....................       
....................    lcd_output_enable(0);
01BB:  BCF    08.6
01BC:  BSF    03.5
01BD:  BCF    08.6
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
01BE:  BCF    08.5
....................    output_drive(LCD_DATA5);
01BF:  BCF    08.4
....................    output_drive(LCD_DATA6);
01C0:  BCF    08.3
....................    output_drive(LCD_DATA7);
01C1:  BCF    08.2
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
01C2:  BCF    03.5
01C3:  SWAPF  52,W
01C4:  MOVWF  77
01C5:  MOVLW  F0
01C6:  ANDWF  77,F
01C7:  MOVF   77,W
01C8:  IORWF  51,W
01C9:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
0161:  CLRF   53
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
0162:  BSF    03.5
0163:  BSF    08.5
0164:  MOVLW  00
0165:  BCF    03.5
0166:  BTFSC  08.5
0167:  MOVLW  01
0168:  IORWF  53,F
....................    n |= input(LCD_DATA5) << 1;
0169:  BSF    03.5
016A:  BSF    08.4
016B:  MOVLW  00
016C:  BCF    03.5
016D:  BTFSC  08.4
016E:  MOVLW  01
016F:  MOVWF  77
0170:  BCF    03.0
0171:  RLF    77,F
0172:  MOVF   77,W
0173:  IORWF  53,F
....................    n |= input(LCD_DATA6) << 2;
0174:  BSF    03.5
0175:  BSF    08.3
0176:  MOVLW  00
0177:  BCF    03.5
0178:  BTFSC  08.3
0179:  MOVLW  01
017A:  MOVWF  77
017B:  RLF    77,F
017C:  RLF    77,F
017D:  MOVLW  FC
017E:  ANDWF  77,F
017F:  MOVF   77,W
0180:  IORWF  53,F
....................    n |= input(LCD_DATA7) << 3;
0181:  BSF    03.5
0182:  BSF    08.2
0183:  MOVLW  00
0184:  BCF    03.5
0185:  BTFSC  08.2
0186:  MOVLW  01
0187:  MOVWF  77
0188:  RLF    77,F
0189:  RLF    77,F
018A:  RLF    77,F
018B:  MOVLW  F8
018C:  ANDWF  77,F
018D:  MOVF   77,W
018E:  IORWF  53,F
....................    
....................    return(n);
018F:  MOVF   53,W
0190:  MOVWF  78
....................   #else
0191:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0133:  BTFSC  52.0
0134:  GOTO   137
0135:  BCF    08.5
0136:  GOTO   138
0137:  BSF    08.5
0138:  BSF    03.5
0139:  BCF    08.5
....................    output_bit(LCD_DATA5, bit_test(n, 1));
013A:  BCF    03.5
013B:  BTFSC  52.1
013C:  GOTO   13F
013D:  BCF    08.4
013E:  GOTO   140
013F:  BSF    08.4
0140:  BSF    03.5
0141:  BCF    08.4
....................    output_bit(LCD_DATA6, bit_test(n, 2));
0142:  BCF    03.5
0143:  BTFSC  52.2
0144:  GOTO   147
0145:  BCF    08.3
0146:  GOTO   148
0147:  BSF    08.3
0148:  BSF    03.5
0149:  BCF    08.3
....................    output_bit(LCD_DATA7, bit_test(n, 3));
014A:  BCF    03.5
014B:  BTFSC  52.3
014C:  GOTO   14F
014D:  BCF    08.2
014E:  GOTO   150
014F:  BSF    08.2
0150:  BSF    03.5
0151:  BCF    08.2
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
0152:  NOP
....................    lcd_output_enable(1);
0153:  BCF    03.5
0154:  BSF    08.6
0155:  BSF    03.5
0156:  BCF    08.6
....................    delay_us(2);
0157:  MOVLW  03
0158:  MOVWF  77
0159:  DECFSZ 77,F
015A:  GOTO   159
....................    lcd_output_enable(0);
015B:  BCF    03.5
015C:  BCF    08.6
015D:  BSF    03.5
015E:  BCF    08.6
015F:  BCF    03.5
0160:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0192:  BSF    03.5
0193:  BCF    08.6
....................    lcd_rs_tris();
0194:  BCF    08.7
....................    lcd_rw_tris();
0195:  BCF    08.0
....................   #endif
.................... 
....................    lcd_output_rs(0);
0196:  BCF    03.5
0197:  BCF    08.7
0198:  BSF    03.5
0199:  BCF    08.7
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
01CA:  MOVF   78,W
01CB:  MOVWF  51
01CC:  BTFSS  51.7
01CD:  GOTO   1D0
01CE:  BSF    03.5
01CF:  GOTO   19A
....................    lcd_output_rs(address);
01D0:  MOVF   4F,F
01D1:  BTFSS  03.2
01D2:  GOTO   1D5
01D3:  BCF    08.7
01D4:  GOTO   1D6
01D5:  BSF    08.7
01D6:  BSF    03.5
01D7:  BCF    08.7
....................    delay_cycles(1);
01D8:  NOP
....................    lcd_output_rw(0);
01D9:  BCF    03.5
01DA:  BCF    08.0
01DB:  BSF    03.5
01DC:  BCF    08.0
....................    delay_cycles(1);
01DD:  NOP
....................    lcd_output_enable(0);
01DE:  BCF    03.5
01DF:  BCF    08.6
01E0:  BSF    03.5
01E1:  BCF    08.6
....................    lcd_send_nibble(n >> 4);
01E2:  BCF    03.5
01E3:  SWAPF  50,W
01E4:  MOVWF  51
01E5:  MOVLW  0F
01E6:  ANDWF  51,F
01E7:  MOVF   51,W
01E8:  MOVWF  52
01E9:  CALL   133
....................    lcd_send_nibble(n & 0xf);
01EA:  MOVF   50,W
01EB:  ANDLW  0F
01EC:  MOVWF  51
01ED:  MOVWF  52
01EE:  CALL   133
01EF:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
*
0284:  MOVLW  28
0285:  MOVWF  31
0286:  MOVLW  0C
0287:  MOVWF  32
0288:  MOVLW  01
0289:  MOVWF  33
028A:  MOVLW  06
028B:  MOVWF  34
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
028C:  BCF    08.6
028D:  BSF    03.5
028E:  BCF    08.6
....................    lcd_output_rs(0);
028F:  BCF    03.5
0290:  BCF    08.7
0291:  BSF    03.5
0292:  BCF    08.7
....................    lcd_output_rw(0);
0293:  BCF    03.5
0294:  BCF    08.0
0295:  BSF    03.5
0296:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
0297:  BCF    08.5
....................    output_drive(LCD_DATA5);
0298:  BCF    08.4
....................    output_drive(LCD_DATA6);
0299:  BCF    08.3
....................    output_drive(LCD_DATA7);
029A:  BCF    08.2
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
029B:  BCF    08.6
....................    lcd_rs_tris();
029C:  BCF    08.7
....................    lcd_rw_tris();
029D:  BCF    08.0
....................  #endif
....................     
....................    delay_ms(15);
029E:  MOVLW  0F
029F:  BCF    03.5
02A0:  MOVWF  4B
02A1:  CALL   11F
....................    for(i=1;i<=3;++i)
02A2:  MOVLW  01
02A3:  MOVWF  30
02A4:  MOVF   30,W
02A5:  SUBLW  03
02A6:  BTFSS  03.0
02A7:  GOTO   2B0
....................    {
....................        lcd_send_nibble(3);
02A8:  MOVLW  03
02A9:  MOVWF  52
02AA:  CALL   133
....................        delay_ms(5);
02AB:  MOVLW  05
02AC:  MOVWF  4B
02AD:  CALL   11F
02AE:  INCF   30,F
02AF:  GOTO   2A4
....................    }
....................    
....................    lcd_send_nibble(2);
02B0:  MOVLW  02
02B1:  MOVWF  52
02B2:  CALL   133
....................    delay_ms(5);
02B3:  MOVLW  05
02B4:  MOVWF  4B
02B5:  CALL   11F
....................    for(i=0;i<=3;++i)
02B6:  CLRF   30
02B7:  MOVF   30,W
02B8:  SUBLW  03
02B9:  BTFSS  03.0
02BA:  GOTO   2C7
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
02BB:  MOVLW  31
02BC:  ADDWF  30,W
02BD:  MOVWF  04
02BE:  BCF    03.7
02BF:  MOVF   00,W
02C0:  MOVWF  35
02C1:  CLRF   4F
02C2:  MOVF   35,W
02C3:  MOVWF  50
02C4:  CALL   192
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
02C5:  INCF   30,F
02C6:  GOTO   2B7
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
01F0:  DECFSZ 4C,W
01F1:  GOTO   1F3
01F2:  GOTO   1F6
....................       address=LCD_LINE_TWO;
01F3:  MOVLW  40
01F4:  MOVWF  4D
01F5:  GOTO   1F7
....................    else
....................       address=0;
01F6:  CLRF   4D
....................      
....................    address+=x-1;
01F7:  MOVLW  01
01F8:  SUBWF  4B,W
01F9:  ADDWF  4D,F
....................    lcd_send_byte(0,0x80|address);
01FA:  MOVF   4D,W
01FB:  IORLW  80
01FC:  MOVWF  4E
01FD:  CLRF   4F
01FE:  MOVF   4E,W
01FF:  MOVWF  50
0200:  CALL   192
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0201:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0202:  MOVF   4A,W
0203:  XORLW  07
0204:  BTFSC  03.2
0205:  GOTO   210
0206:  XORLW  0B
0207:  BTFSC  03.2
0208:  GOTO   215
0209:  XORLW  06
020A:  BTFSC  03.2
020B:  GOTO   21D
020C:  XORLW  02
020D:  BTFSC  03.2
020E:  GOTO   223
020F:  GOTO   228
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
0210:  MOVLW  01
0211:  MOVWF  4B
0212:  MOVWF  4C
0213:  CALL   1F0
0214:  GOTO   22D
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0215:  CLRF   4F
0216:  MOVLW  01
0217:  MOVWF  50
0218:  CALL   192
....................                      delay_ms(2);
0219:  MOVLW  02
021A:  MOVWF  4B
021B:  CALL   11F
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
021C:  GOTO   22D
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
021D:  MOVLW  01
021E:  MOVWF  4B
021F:  MOVLW  02
0220:  MOVWF  4C
0221:  CALL   1F0
0222:  GOTO   22D
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0223:  CLRF   4F
0224:  MOVLW  10
0225:  MOVWF  50
0226:  CALL   192
0227:  GOTO   22D
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0228:  MOVLW  01
0229:  MOVWF  4F
022A:  MOVF   4A,W
022B:  MOVWF  50
022C:  CALL   192
....................      #endif
....................    }
022D:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... enum seleccion_opciones_menu {
....................     SELECCION_VOLTAJE = 1,
....................     SELECCION_AMPERAJE,
....................     SELECCION_TEMPERATURA
.................... };
.................... 
.................... enum estados_menu {
....................     ESTADO_MENU_INICIO,
....................     ESTADO_MENU_VOLTAJE,
....................     ESTADO_MENU_AMPERAJE,
....................     ESTADO_MENU_TEMPERATURA
.................... };
.................... 
.................... void creditos();
.................... void initial_config();
.................... void menu_inicio();
.................... void mostrar_corriente();
.................... void mostrar_voltaje();
.................... void mostrar_temperatura();
.................... 
.................... int seleccion_menu_inicio = SELECCION_VOLTAJE;
.................... int estado_menu = ESTADO_MENU_INICIO;
.................... int refresh = false;
.................... 
.................... /**
....................  * @brief Interrupcion de botones, cuando reciba una interrupcion maneja los estados
....................  * 
....................  */
.................... #INT_RB
.................... void isr_rb(void) {
....................     switch(input_b()) {
*
004F:  MOVLW  FF
0050:  BSF    03.5
0051:  MOVWF  06
0052:  BCF    03.5
0053:  MOVF   06,W
0054:  XORLW  70
0055:  BTFSC  03.2
0056:  GOTO   061
0057:  XORLW  C0
0058:  BTFSC  03.2
0059:  GOTO   06C
005A:  XORLW  60
005B:  BTFSC  03.2
005C:  GOTO   077
005D:  XORLW  30
005E:  BTFSC  03.2
005F:  GOTO   07F
0060:  GOTO   085
....................         case 0b01110000:
....................             if (estado_menu == ESTADO_MENU_INICIO && (seleccion_menu_inicio > SELECCION_VOLTAJE)) {
0061:  MOVF   2C,F
0062:  BTFSS  03.2
0063:  GOTO   06B
0064:  MOVF   2B,W
0065:  SUBLW  01
0066:  BTFSC  03.0
0067:  GOTO   06B
....................                 seleccion_menu_inicio--;
0068:  DECF   2B,F
....................                 refresh = true;
0069:  MOVLW  01
006A:  MOVWF  2D
....................             }
.................... 
....................             break;
006B:  GOTO   085
....................         case 0b10110000:
....................             if ((estado_menu == ESTADO_MENU_INICIO) && (seleccion_menu_inicio < SELECCION_TEMPERATURA)) {
006C:  MOVF   2C,F
006D:  BTFSS  03.2
006E:  GOTO   076
006F:  MOVF   2B,W
0070:  SUBLW  02
0071:  BTFSS  03.0
0072:  GOTO   076
....................                 seleccion_menu_inicio++;
0073:  INCF   2B,F
....................                 refresh = true;
0074:  MOVLW  01
0075:  MOVWF  2D
....................             }
.................... 
....................             break;
0076:  GOTO   085
....................         case 0b11010000:
....................             if (estado_menu == ESTADO_MENU_INICIO) {
0077:  MOVF   2C,F
0078:  BTFSS  03.2
0079:  GOTO   07E
....................                 estado_menu = seleccion_menu_inicio;
007A:  MOVF   2B,W
007B:  MOVWF  2C
....................                 refresh = true;
007C:  MOVLW  01
007D:  MOVWF  2D
....................             }
....................             break;
007E:  GOTO   085
....................         case 0b11100000:
....................             if (estado_menu != ESTADO_MENU_INICIO) {
007F:  MOVF   2C,F
0080:  BTFSC  03.2
0081:  GOTO   085
....................                 estado_menu = ESTADO_MENU_INICIO;
0082:  CLRF   2C
....................                 refresh = true;
0083:  MOVLW  01
0084:  MOVWF  2D
....................             }
....................             break;
....................     }
....................     //delay_ms(10);
0085:  BCF    0B.0
0086:  BCF    0A.3
0087:  BCF    0A.4
0088:  GOTO   02B
.................... }
.................... 
.................... void main() 
*
07BC:  MOVF   03,W
07BD:  ANDLW  1F
07BE:  MOVWF  03
07BF:  MOVLW  81
07C0:  BSF    03.5
07C1:  MOVWF  19
07C2:  MOVLW  A6
07C3:  MOVWF  18
07C4:  MOVLW  90
07C5:  BCF    03.5
07C6:  MOVWF  18
07C7:  MOVLW  01
07C8:  MOVWF  2B
07C9:  CLRF   2C
07CA:  CLRF   2D
07CB:  CLRF   2F
07CC:  CLRF   2E
07CD:  BSF    03.5
07CE:  BSF    1F.0
07CF:  BSF    1F.1
07D0:  BSF    1F.2
07D1:  BCF    1F.3
07D2:  MOVLW  07
07D3:  MOVWF  1C
07D4:  BCF    03.7
.................... {
....................     initial_config();
07D5:  BCF    03.5
07D6:  GOTO   104
....................     creditos();
07D7:  GOTO   284
.................... 
....................     while(true) {
....................         refresh = false;
07D8:  CLRF   2D
.................... 
....................         switch(estado_menu) {
07D9:  MOVF   2C,W
07DA:  ADDLW  FC
07DB:  BTFSC  03.0
07DC:  GOTO   7E6
07DD:  ADDLW  04
07DE:  GOTO   7E8
....................             case ESTADO_MENU_INICIO:
....................                 menu_inicio();
07DF:  GOTO   318
....................                 break;
07E0:  GOTO   7E6
....................             case ESTADO_MENU_VOLTAJE:
....................                 mostrar_voltaje();
07E1:  GOTO   57C
....................                 break;
07E2:  GOTO   7E6
....................             case ESTADO_MENU_AMPERAJE:
....................                 mostrar_corriente();
07E3:  GOTO   5E6
....................                 break;
07E4:  GOTO   7E6
....................             case ESTADO_MENU_TEMPERATURA:
....................                 mostrar_temperatura();
07E5:  GOTO   75F
....................                 break;
....................         }
07E6:  GOTO   7D8
....................     }
.................... }
.................... 
07E7:  SLEEP
.................... /**
....................  * @brief Configuracion inicial del microcontrolador antes de que empiece a ejecutar el resto del programa
....................  * 
....................  */
.................... void initial_config() {
....................     setup_adc_ports(AN0_AN1_AN2_AN3_AN4_AN5);
*
0104:  BSF    03.5
0105:  BSF    1F.0
0106:  BCF    1F.1
0107:  BCF    1F.2
0108:  BSF    1F.3
....................     setup_adc(ADC_CLOCK_INTERNAL);
0109:  BCF    1F.6
010A:  BCF    03.5
010B:  BSF    1F.6
010C:  BSF    1F.7
010D:  BSF    03.5
010E:  BSF    1F.7
010F:  BCF    03.5
0110:  BSF    1F.0
....................     output_b(0);
0111:  BSF    03.5
0112:  CLRF   06
0113:  BCF    03.5
0114:  CLRF   06
....................     set_tris_b(0xF0);
0115:  MOVLW  F0
0116:  BSF    03.5
0117:  MOVWF  06
....................     enable_interrupts(INT_RB);
0118:  BCF    03.5
0119:  BSF    0B.3
....................     enable_interrupts(GLOBAL);
011A:  MOVLW  C0
011B:  IORWF  0B,F
011C:  BCF    0A.3
011D:  BCF    0A.4
011E:  GOTO   7D7 (RETURN)
.................... }
.................... 
.................... /**
....................  * @brief Muestran los creditos del proyecto
....................  * 
....................  */
.................... void creditos() {
....................     lcd_init();
....................     lcd_gotoxy(1,1);
*
02C7:  MOVLW  01
02C8:  MOVWF  4B
02C9:  MOVWF  4C
02CA:  CALL   1F0
....................     lcd_putc("\fMultimetro Dig.");
02CB:  MOVLW  89
02CC:  BSF    03.6
02CD:  MOVWF  0D
02CE:  MOVLW  00
02CF:  MOVWF  0F
02D0:  BCF    03.6
02D1:  CALL   22E
....................     lcd_gotoxy(1,2);
02D2:  MOVLW  01
02D3:  MOVWF  4B
02D4:  MOVLW  02
02D5:  MOVWF  4C
02D6:  CALL   1F0
....................     lcd_putc("EQ 6, Grupo 6");
02D7:  MOVLW  92
02D8:  BSF    03.6
02D9:  MOVWF  0D
02DA:  MOVLW  00
02DB:  MOVWF  0F
02DC:  BCF    03.6
02DD:  CALL   22E
....................     delay_ms(100);
02DE:  MOVLW  64
02DF:  MOVWF  4B
02E0:  CALL   11F
....................     lcd_gotoxy(1,1);
02E1:  MOVLW  01
02E2:  MOVWF  4B
02E3:  MOVWF  4C
02E4:  CALL   1F0
....................     lcd_putc("\fLopez Carrasco");
02E5:  MOVLW  99
02E6:  BSF    03.6
02E7:  MOVWF  0D
02E8:  MOVLW  00
02E9:  MOVWF  0F
02EA:  BCF    03.6
02EB:  CALL   22E
....................     lcd_gotoxy(1,2);
02EC:  MOVLW  01
02ED:  MOVWF  4B
02EE:  MOVLW  02
02EF:  MOVWF  4C
02F0:  CALL   1F0
....................     lcd_putc("Karla");
02F1:  MOVLW  A1
02F2:  BSF    03.6
02F3:  MOVWF  0D
02F4:  MOVLW  00
02F5:  MOVWF  0F
02F6:  BCF    03.6
02F7:  CALL   22E
....................     delay_ms(100);
02F8:  MOVLW  64
02F9:  MOVWF  4B
02FA:  CALL   11F
....................     lcd_gotoxy(1,1);
02FB:  MOVLW  01
02FC:  MOVWF  4B
02FD:  MOVWF  4C
02FE:  CALL   1F0
....................     lcd_putc("\fReyes Valderrama");
02FF:  MOVLW  A4
0300:  BSF    03.6
0301:  MOVWF  0D
0302:  MOVLW  00
0303:  MOVWF  0F
0304:  BCF    03.6
0305:  CALL   22E
....................     lcd_gotoxy(1,2);
0306:  MOVLW  01
0307:  MOVWF  4B
0308:  MOVLW  02
0309:  MOVWF  4C
030A:  CALL   1F0
....................     lcd_putc("Rodrigo Miguel");
030B:  MOVLW  AD
030C:  BSF    03.6
030D:  MOVWF  0D
030E:  MOVLW  00
030F:  MOVWF  0F
0310:  BCF    03.6
0311:  CALL   22E
....................     delay_ms(100);
0312:  MOVLW  64
0313:  MOVWF  4B
0314:  CALL   11F
0315:  BCF    0A.3
0316:  BCF    0A.4
0317:  GOTO   7D8 (RETURN)
.................... }
.................... 
.................... /**
....................  * @brief Muestra en lcd las opciones del menu
....................  * 
....................  */
.................... void menu_inicio() {
.................... 
....................     switch (seleccion_menu_inicio) {
0318:  MOVF   2B,W
0319:  XORLW  01
031A:  BTFSC  03.2
031B:  GOTO   323
031C:  XORLW  03
031D:  BTFSC  03.2
031E:  GOTO   337
031F:  XORLW  01
0320:  BTFSC  03.2
0321:  GOTO   34B
0322:  GOTO   35E
....................         case SELECCION_VOLTAJE:
....................             lcd_putc("\f->> Voltimetro");
0323:  MOVLW  B5
0324:  BSF    03.6
0325:  MOVWF  0D
0326:  MOVLW  00
0327:  MOVWF  0F
0328:  BCF    03.6
0329:  CALL   22E
....................             lcd_gotoxy(1,2);
032A:  MOVLW  01
032B:  MOVWF  4B
032C:  MOVLW  02
032D:  MOVWF  4C
032E:  CALL   1F0
....................             lcd_putc(" Amperimetro");
032F:  MOVLW  BD
0330:  BSF    03.6
0331:  MOVWF  0D
0332:  MOVLW  00
0333:  MOVWF  0F
0334:  BCF    03.6
0335:  CALL   22E
....................             break;
0336:  GOTO   35E
....................         case SELECCION_AMPERAJE:
....................             lcd_putc("\f->> Amperimetro");
0337:  MOVLW  C4
0338:  BSF    03.6
0339:  MOVWF  0D
033A:  MOVLW  00
033B:  MOVWF  0F
033C:  BCF    03.6
033D:  CALL   22E
....................             lcd_gotoxy(1,2);
033E:  MOVLW  01
033F:  MOVWF  4B
0340:  MOVLW  02
0341:  MOVWF  4C
0342:  CALL   1F0
....................             lcd_putc(" Temperatura");
0343:  MOVLW  CD
0344:  BSF    03.6
0345:  MOVWF  0D
0346:  MOVLW  00
0347:  MOVWF  0F
0348:  BCF    03.6
0349:  CALL   22E
....................             break;
034A:  GOTO   35E
....................         case SELECCION_TEMPERATURA:
....................             lcd_putc("\f Amperimetro");
034B:  MOVLW  D4
034C:  BSF    03.6
034D:  MOVWF  0D
034E:  MOVLW  00
034F:  MOVWF  0F
0350:  BCF    03.6
0351:  CALL   22E
....................             lcd_gotoxy(1,2);
0352:  MOVLW  01
0353:  MOVWF  4B
0354:  MOVLW  02
0355:  MOVWF  4C
0356:  CALL   1F0
....................             lcd_putc("->> Temperatura");
0357:  MOVLW  DB
0358:  BSF    03.6
0359:  MOVWF  0D
035A:  MOVLW  00
035B:  MOVWF  0F
035C:  BCF    03.6
035D:  CALL   22E
....................             break;
....................     }
.................... 
....................     while(!refresh);
035E:  MOVF   2D,F
035F:  BTFSC  03.2
0360:  GOTO   35E
0361:  BCF    0A.3
0362:  BCF    0A.4
0363:  GOTO   7E6 (RETURN)
.................... }
.................... 
.................... /**
....................  * @brief Calcula la temperatura y la muestra en el LCD
....................  * 
....................  */
.................... void mostrar_temperatura() {
*
075F:  MOVLW  DF
0760:  MOVWF  35
....................     int temperatura_entrada;
....................     float temperatura_salida;
....................     char grados = 0xDF;
.................... 
....................     set_adc_channel(0);
0761:  MOVLW  00
0762:  MOVWF  78
0763:  MOVF   1F,W
0764:  ANDLW  C7
0765:  IORWF  78,W
0766:  MOVWF  1F
....................     delay_us(40);
0767:  MOVLW  42
0768:  MOVWF  77
0769:  DECFSZ 77,F
076A:  GOTO   769
076B:  NOP
....................     
....................     lcd_putc("\f Temperatura: ");
076C:  MOVLW  E3
076D:  BSF    03.6
076E:  MOVWF  0D
076F:  MOVLW  00
0770:  MOVWF  0F
0771:  BCF    03.6
0772:  CALL   22E
....................     while (!refresh) {
0773:  MOVF   2D,F
0774:  BTFSS  03.2
0775:  GOTO   7B9
....................         temperatura_entrada = read_adc();
0776:  BSF    1F.2
0777:  BTFSC  1F.2
0778:  GOTO   777
0779:  BSF    03.5
077A:  MOVF   1E,W
077B:  BCF    03.5
077C:  MOVWF  30
....................         temperatura_salida = temperatura_entrada * 0.483;
077D:  CLRF   3E
077E:  MOVF   30,W
077F:  MOVWF  3D
0780:  CALL   364
0781:  MOVF   7A,W
0782:  MOVWF  4D
0783:  MOVF   79,W
0784:  MOVWF  4C
0785:  MOVF   78,W
0786:  MOVWF  4B
0787:  MOVF   77,W
0788:  MOVWF  4A
0789:  MOVLW  C7
078A:  MOVWF  51
078B:  MOVLW  4B
078C:  MOVWF  50
078D:  MOVLW  77
078E:  MOVWF  4F
078F:  MOVLW  7D
0790:  MOVWF  4E
0791:  CALL   381
0792:  MOVF   7A,W
0793:  MOVWF  34
0794:  MOVF   79,W
0795:  MOVWF  33
0796:  MOVF   78,W
0797:  MOVWF  32
0798:  MOVF   77,W
0799:  MOVWF  31
....................         lcd_gotoxy(1,2);
079A:  MOVLW  01
079B:  MOVWF  4B
079C:  MOVLW  02
079D:  MOVWF  4C
079E:  CALL   1F0
....................         printf(lcd_putc," %2.1f %c", temperatura_salida, grados);
079F:  MOVLW  20
07A0:  MOVWF  4A
07A1:  CALL   202
07A2:  MOVLW  01
07A3:  MOVWF  04
07A4:  MOVF   34,W
07A5:  MOVWF  40
07A6:  MOVF   33,W
07A7:  MOVWF  3F
07A8:  MOVF   32,W
07A9:  MOVWF  3E
07AA:  MOVF   31,W
07AB:  MOVWF  3D
07AC:  MOVLW  01
07AD:  MOVWF  41
07AE:  CALL   445
07AF:  MOVLW  20
07B0:  MOVWF  4A
07B1:  CALL   202
07B2:  MOVF   35,W
07B3:  MOVWF  4A
07B4:  CALL   202
....................         delay_ms(20);
07B5:  MOVLW  14
07B6:  MOVWF  4B
07B7:  CALL   11F
07B8:  GOTO   773
....................     }
07B9:  BCF    0A.3
07BA:  BCF    0A.4
07BB:  GOTO   7E6 (RETURN)
.................... }
.................... 
.................... /**
....................  * @brief Calcula el voltaje y muestra en LCD
....................  * 
....................  */
.................... void mostrar_voltaje() {
....................     float voltaje;
.................... 
....................     set_adc_channel(1);
*
057C:  MOVLW  08
057D:  MOVWF  78
057E:  MOVF   1F,W
057F:  ANDLW  C7
0580:  IORWF  78,W
0581:  MOVWF  1F
....................     delay_us(40);
0582:  MOVLW  42
0583:  MOVWF  77
0584:  DECFSZ 77,F
0585:  GOTO   584
0586:  NOP
.................... 
....................     lcd_putc("\f Voltaje: ");
0587:  MOVLW  EB
0588:  BSF    03.6
0589:  MOVWF  0D
058A:  MOVLW  00
058B:  MOVWF  0F
058C:  BCF    03.6
058D:  CALL   22E
....................     while (!refresh) {
058E:  MOVF   2D,F
058F:  BTFSS  03.2
0590:  GOTO   5E3
....................         voltaje = (float) read_adc() * ((5.0 / 1024.0) * 4.1);
0591:  BSF    1F.2
0592:  BTFSC  1F.2
0593:  GOTO   592
0594:  MOVF   1E,W
0595:  MOVWF  79
0596:  BSF    03.5
0597:  MOVF   1E,W
0598:  MOVWF  78
0599:  MOVF   79,W
059A:  MOVWF  7A
059B:  MOVF   1E,W
059C:  BCF    03.5
059D:  MOVWF  3D
059E:  MOVF   79,W
059F:  MOVWF  3E
05A0:  CALL   364
05A1:  MOVF   7A,W
05A2:  MOVWF  37
05A3:  MOVF   79,W
05A4:  MOVWF  36
05A5:  MOVF   78,W
05A6:  MOVWF  35
05A7:  MOVF   77,W
05A8:  MOVWF  34
05A9:  MOVF   7A,W
05AA:  MOVWF  4D
05AB:  MOVF   79,W
05AC:  MOVWF  4C
05AD:  MOVF   78,W
05AE:  MOVWF  4B
05AF:  MOVF   77,W
05B0:  MOVWF  4A
05B1:  CLRF   51
05B2:  CLRF   50
05B3:  MOVLW  24
05B4:  MOVWF  4F
05B5:  MOVLW  79
05B6:  MOVWF  4E
05B7:  CALL   381
05B8:  MOVF   7A,W
05B9:  MOVWF  33
05BA:  MOVF   79,W
05BB:  MOVWF  32
05BC:  MOVF   78,W
05BD:  MOVWF  31
05BE:  MOVF   77,W
05BF:  MOVWF  30
....................         lcd_gotoxy(1,2);
05C0:  MOVLW  01
05C1:  MOVWF  4B
05C2:  MOVLW  02
05C3:  MOVWF  4C
05C4:  CALL   1F0
....................         printf(lcd_putc," %2.2f [V]", voltaje);
05C5:  MOVLW  20
05C6:  MOVWF  4A
05C7:  CALL   202
05C8:  MOVLW  89
05C9:  MOVWF  04
05CA:  MOVF   33,W
05CB:  MOVWF  40
05CC:  MOVF   32,W
05CD:  MOVWF  3F
05CE:  MOVF   31,W
05CF:  MOVWF  3E
05D0:  MOVF   30,W
05D1:  MOVWF  3D
05D2:  MOVLW  02
05D3:  MOVWF  41
05D4:  CALL   445
05D5:  MOVLW  F4
05D6:  BSF    03.6
05D7:  MOVWF  0D
05D8:  MOVLW  00
05D9:  MOVWF  0F
05DA:  BCF    03.0
05DB:  MOVLW  04
05DC:  BCF    03.6
05DD:  MOVWF  3D
05DE:  CALL   525
....................         delay_ms(20);
05DF:  MOVLW  14
05E0:  MOVWF  4B
05E1:  CALL   11F
05E2:  GOTO   58E
....................     }
05E3:  BCF    0A.3
05E4:  BCF    0A.4
05E5:  GOTO   7E6 (RETURN)
.................... }
.................... 
.................... /**
....................  * @brief Calcula la corriente y muestra en LCD
....................  * 
....................  */
.................... void mostrar_corriente() {
05E6:  MOVLW  CD
05E7:  MOVWF  3B
05E8:  MOVLW  CC
05E9:  MOVWF  3A
05EA:  MOVLW  4C
05EB:  MOVWF  39
05EC:  MOVLW  7B
05ED:  MOVWF  38
....................     float voltaje, corriente, resistencia = 0.1;
....................     int valor_entrada;
.................... 
....................     set_adc_channel(2);
05EE:  MOVLW  10
05EF:  MOVWF  78
05F0:  MOVF   1F,W
05F1:  ANDLW  C7
05F2:  IORWF  78,W
05F3:  MOVWF  1F
....................     delay_us(40);
05F4:  MOVLW  42
05F5:  MOVWF  77
05F6:  DECFSZ 77,F
05F7:  GOTO   5F6
05F8:  NOP
....................     
....................     lcd_putc("\f Corriente: ");
05F9:  MOVLW  F7
05FA:  BSF    03.6
05FB:  MOVWF  0D
05FC:  MOVLW  00
05FD:  MOVWF  0F
05FE:  BCF    03.6
05FF:  CALL   22E
....................     while (!refresh) {
0600:  MOVF   2D,F
0601:  BTFSS  03.2
0602:  GOTO   75C
....................         valor_entrada = (float) read_adc();
0603:  BSF    1F.2
0604:  BTFSC  1F.2
0605:  GOTO   604
0606:  MOVF   1E,W
0607:  MOVWF  79
0608:  BSF    03.5
0609:  MOVF   1E,W
060A:  MOVWF  78
060B:  MOVF   79,W
060C:  MOVWF  7A
060D:  MOVF   78,W
060E:  BCF    03.5
060F:  MOVWF  3D
0610:  MOVF   7A,W
0611:  MOVWF  3E
0612:  CALL   364
0613:  MOVF   7A,W
0614:  MOVWF  40
0615:  MOVF   79,W
0616:  MOVWF  3F
0617:  MOVF   78,W
0618:  MOVWF  3E
0619:  MOVF   77,W
061A:  MOVWF  3D
*
0639:  MOVF   78,W
063A:  MOVWF  3C
....................         voltaje = valor_entrada * ((5.0 / 1023.0) * 4.09);
063B:  CLRF   3E
063C:  MOVF   3C,W
063D:  MOVWF  3D
063E:  CALL   364
063F:  MOVF   7A,W
0640:  MOVWF  4D
0641:  MOVF   79,W
0642:  MOVWF  4C
0643:  MOVF   78,W
0644:  MOVWF  4B
0645:  MOVF   77,W
0646:  MOVWF  4A
0647:  MOVLW  8B
0648:  MOVWF  51
0649:  MOVLW  C2
064A:  MOVWF  50
064B:  MOVLW  23
064C:  MOVWF  4F
064D:  MOVLW  79
064E:  MOVWF  4E
064F:  CALL   381
0650:  MOVF   7A,W
0651:  MOVWF  33
0652:  MOVF   79,W
0653:  MOVWF  32
0654:  MOVF   78,W
0655:  MOVWF  31
0656:  MOVF   77,W
0657:  MOVWF  30
....................         corriente = voltaje / resistencia;
0658:  MOVF   33,W
0659:  MOVWF  40
065A:  MOVF   32,W
065B:  MOVWF  3F
065C:  MOVF   31,W
065D:  MOVWF  3E
065E:  MOVF   30,W
065F:  MOVWF  3D
0660:  MOVF   3B,W
0661:  MOVWF  44
0662:  MOVF   3A,W
0663:  MOVWF  43
0664:  MOVF   39,W
0665:  MOVWF  42
0666:  MOVF   38,W
0667:  MOVWF  41
*
0731:  MOVF   7A,W
0732:  MOVWF  37
0733:  MOVF   79,W
0734:  MOVWF  36
0735:  MOVF   78,W
0736:  MOVWF  35
0737:  MOVF   77,W
0738:  MOVWF  34
....................         lcd_gotoxy(1,2);
0739:  MOVLW  01
073A:  MOVWF  4B
073B:  MOVLW  02
073C:  MOVWF  4C
073D:  CALL   1F0
....................         printf(lcd_putc," %2.2f [A]", corriente);
073E:  MOVLW  20
073F:  MOVWF  4A
0740:  CALL   202
0741:  MOVLW  89
0742:  MOVWF  04
0743:  MOVF   37,W
0744:  MOVWF  40
0745:  MOVF   36,W
0746:  MOVWF  3F
0747:  MOVF   35,W
0748:  MOVWF  3E
0749:  MOVF   34,W
074A:  MOVWF  3D
074B:  MOVLW  02
074C:  MOVWF  41
074D:  CALL   445
074E:  MOVLW  01
074F:  BSF    03.6
0750:  MOVWF  0D
0751:  MOVLW  01
0752:  MOVWF  0F
0753:  BCF    03.0
0754:  MOVLW  04
0755:  BCF    03.6
0756:  MOVWF  3D
0757:  CALL   525
....................         delay_ms(20);
0758:  MOVLW  14
0759:  MOVWF  4B
075A:  CALL   11F
075B:  GOTO   600
....................     }
075C:  BCF    0A.3
075D:  BCF    0A.4
075E:  GOTO   7E6 (RETURN)
.................... }

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
